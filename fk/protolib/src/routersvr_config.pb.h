// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routersvr_config.proto

#ifndef PROTOBUF_routersvr_5fconfig_2eproto__INCLUDED
#define PROTOBUF_routersvr_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_routersvr_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsListenInfoImpl();
void InitDefaultsListenInfo();
void InitDefaultsPolicyImpl();
void InitDefaultsPolicy();
void InitDefaultsRouterSvrConfigImpl();
void InitDefaultsRouterSvrConfig();
inline void InitDefaults() {
  InitDefaultsListenInfo();
  InitDefaultsPolicy();
  InitDefaultsRouterSvrConfig();
}
}  // namespace protobuf_routersvr_5fconfig_2eproto
namespace config {
class ListenInfo;
class ListenInfoDefaultTypeInternal;
extern ListenInfoDefaultTypeInternal _ListenInfo_default_instance_;
class Policy;
class PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class RouterSvrConfig;
class RouterSvrConfigDefaultTypeInternal;
extern RouterSvrConfigDefaultTypeInternal _RouterSvrConfig_default_instance_;
}  // namespace config
namespace config {

enum PolicyType {
  POLICY_ROUTER = 0,
  POLICY_RANDOM = 1,
  POLICY_MOD = 2,
  POLICY_BROADCAST = 3
};
bool PolicyType_IsValid(int value);
const PolicyType PolicyType_MIN = POLICY_ROUTER;
const PolicyType PolicyType_MAX = POLICY_BROADCAST;
const int PolicyType_ARRAYSIZE = PolicyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PolicyType_descriptor();
inline const ::std::string& PolicyType_Name(PolicyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PolicyType_descriptor(), value);
}
inline bool PolicyType_Parse(
    const ::std::string& name, PolicyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PolicyType>(
    PolicyType_descriptor(), name, value);
}
// ===================================================================

class ListenInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.ListenInfo) */ {
 public:
  ListenInfo();
  virtual ~ListenInfo();

  ListenInfo(const ListenInfo& from);

  inline ListenInfo& operator=(const ListenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListenInfo(ListenInfo&& from) noexcept
    : ListenInfo() {
    *this = ::std::move(from);
  }

  inline ListenInfo& operator=(ListenInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListenInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListenInfo* internal_default_instance() {
    return reinterpret_cast<const ListenInfo*>(
               &_ListenInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ListenInfo* other);
  friend void swap(ListenInfo& a, ListenInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListenInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ListenInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListenInfo& from);
  void MergeFrom(const ListenInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListenInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string listen_ip = 1;
  bool has_listen_ip() const;
  void clear_listen_ip();
  static const int kListenIpFieldNumber = 1;
  const ::std::string& listen_ip() const;
  void set_listen_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_listen_ip(::std::string&& value);
  #endif
  void set_listen_ip(const char* value);
  void set_listen_ip(const char* value, size_t size);
  ::std::string* mutable_listen_ip();
  ::std::string* release_listen_ip();
  void set_allocated_listen_ip(::std::string* listen_ip);

  // optional int32 listen_port = 2;
  bool has_listen_port() const;
  void clear_listen_port();
  static const int kListenPortFieldNumber = 2;
  ::google::protobuf::int32 listen_port() const;
  void set_listen_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:config.ListenInfo)
 private:
  void set_has_listen_ip();
  void clear_has_listen_ip();
  void set_has_listen_port();
  void clear_has_listen_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr listen_ip_;
  ::google::protobuf::int32 listen_port_;
  friend struct ::protobuf_routersvr_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_routersvr_5fconfig_2eproto::InitDefaultsListenInfoImpl();
};
// -------------------------------------------------------------------

class Policy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.Policy) */ {
 public:
  Policy();
  virtual ~Policy();

  Policy(const Policy& from);

  inline Policy& operator=(const Policy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Policy(Policy&& from) noexcept
    : Policy() {
    *this = ::std::move(from);
  }

  inline Policy& operator=(Policy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Policy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Policy* internal_default_instance() {
    return reinterpret_cast<const Policy*>(
               &_Policy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Policy* other);
  friend void swap(Policy& a, Policy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Policy* New() const PROTOBUF_FINAL { return New(NULL); }

  Policy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Policy& from);
  void MergeFrom(const Policy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Policy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svr_type = 1;
  bool has_svr_type() const;
  void clear_svr_type();
  static const int kSvrTypeFieldNumber = 1;
  ::google::protobuf::uint32 svr_type() const;
  void set_svr_type(::google::protobuf::uint32 value);

  // optional uint32 policy = 2;
  bool has_policy() const;
  void clear_policy();
  static const int kPolicyFieldNumber = 2;
  ::google::protobuf::uint32 policy() const;
  void set_policy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:config.Policy)
 private:
  void set_has_svr_type();
  void clear_has_svr_type();
  void set_has_policy();
  void clear_has_policy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 svr_type_;
  ::google::protobuf::uint32 policy_;
  friend struct ::protobuf_routersvr_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_routersvr_5fconfig_2eproto::InitDefaultsPolicyImpl();
};
// -------------------------------------------------------------------

class RouterSvrConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.RouterSvrConfig) */ {
 public:
  RouterSvrConfig();
  virtual ~RouterSvrConfig();

  RouterSvrConfig(const RouterSvrConfig& from);

  inline RouterSvrConfig& operator=(const RouterSvrConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouterSvrConfig(RouterSvrConfig&& from) noexcept
    : RouterSvrConfig() {
    *this = ::std::move(from);
  }

  inline RouterSvrConfig& operator=(RouterSvrConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouterSvrConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouterSvrConfig* internal_default_instance() {
    return reinterpret_cast<const RouterSvrConfig*>(
               &_RouterSvrConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RouterSvrConfig* other);
  friend void swap(RouterSvrConfig& a, RouterSvrConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouterSvrConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RouterSvrConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouterSvrConfig& from);
  void MergeFrom(const RouterSvrConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouterSvrConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .config.ListenInfo listen_list = 1;
  int listen_list_size() const;
  void clear_listen_list();
  static const int kListenListFieldNumber = 1;
  const ::config::ListenInfo& listen_list(int index) const;
  ::config::ListenInfo* mutable_listen_list(int index);
  ::config::ListenInfo* add_listen_list();
  ::google::protobuf::RepeatedPtrField< ::config::ListenInfo >*
      mutable_listen_list();
  const ::google::protobuf::RepeatedPtrField< ::config::ListenInfo >&
      listen_list() const;

  // repeated int32 legal_svr_list = 2;
  int legal_svr_list_size() const;
  void clear_legal_svr_list();
  static const int kLegalSvrListFieldNumber = 2;
  ::google::protobuf::int32 legal_svr_list(int index) const;
  void set_legal_svr_list(int index, ::google::protobuf::int32 value);
  void add_legal_svr_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      legal_svr_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_legal_svr_list();

  // repeated .config.Policy policy_list = 3;
  int policy_list_size() const;
  void clear_policy_list();
  static const int kPolicyListFieldNumber = 3;
  const ::config::Policy& policy_list(int index) const;
  ::config::Policy* mutable_policy_list(int index);
  ::config::Policy* add_policy_list();
  ::google::protobuf::RepeatedPtrField< ::config::Policy >*
      mutable_policy_list();
  const ::google::protobuf::RepeatedPtrField< ::config::Policy >&
      policy_list() const;

  // optional int32 svr_inst_id = 4;
  bool has_svr_inst_id() const;
  void clear_svr_inst_id();
  static const int kSvrInstIdFieldNumber = 4;
  ::google::protobuf::int32 svr_inst_id() const;
  void set_svr_inst_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:config.RouterSvrConfig)
 private:
  void set_has_svr_inst_id();
  void clear_has_svr_inst_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::config::ListenInfo > listen_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > legal_svr_list_;
  ::google::protobuf::RepeatedPtrField< ::config::Policy > policy_list_;
  ::google::protobuf::int32 svr_inst_id_;
  friend struct ::protobuf_routersvr_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_routersvr_5fconfig_2eproto::InitDefaultsRouterSvrConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListenInfo

// optional string listen_ip = 1;
inline bool ListenInfo::has_listen_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListenInfo::set_has_listen_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListenInfo::clear_has_listen_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListenInfo::clear_listen_ip() {
  listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listen_ip();
}
inline const ::std::string& ListenInfo::listen_ip() const {
  // @@protoc_insertion_point(field_get:config.ListenInfo.listen_ip)
  return listen_ip_.GetNoArena();
}
inline void ListenInfo::set_listen_ip(const ::std::string& value) {
  set_has_listen_ip();
  listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.ListenInfo.listen_ip)
}
#if LANG_CXX11
inline void ListenInfo::set_listen_ip(::std::string&& value) {
  set_has_listen_ip();
  listen_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.ListenInfo.listen_ip)
}
#endif
inline void ListenInfo::set_listen_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_listen_ip();
  listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.ListenInfo.listen_ip)
}
inline void ListenInfo::set_listen_ip(const char* value, size_t size) {
  set_has_listen_ip();
  listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.ListenInfo.listen_ip)
}
inline ::std::string* ListenInfo::mutable_listen_ip() {
  set_has_listen_ip();
  // @@protoc_insertion_point(field_mutable:config.ListenInfo.listen_ip)
  return listen_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListenInfo::release_listen_ip() {
  // @@protoc_insertion_point(field_release:config.ListenInfo.listen_ip)
  clear_has_listen_ip();
  return listen_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListenInfo::set_allocated_listen_ip(::std::string* listen_ip) {
  if (listen_ip != NULL) {
    set_has_listen_ip();
  } else {
    clear_has_listen_ip();
  }
  listen_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listen_ip);
  // @@protoc_insertion_point(field_set_allocated:config.ListenInfo.listen_ip)
}

// optional int32 listen_port = 2;
inline bool ListenInfo::has_listen_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListenInfo::set_has_listen_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListenInfo::clear_has_listen_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListenInfo::clear_listen_port() {
  listen_port_ = 0;
  clear_has_listen_port();
}
inline ::google::protobuf::int32 ListenInfo::listen_port() const {
  // @@protoc_insertion_point(field_get:config.ListenInfo.listen_port)
  return listen_port_;
}
inline void ListenInfo::set_listen_port(::google::protobuf::int32 value) {
  set_has_listen_port();
  listen_port_ = value;
  // @@protoc_insertion_point(field_set:config.ListenInfo.listen_port)
}

// -------------------------------------------------------------------

// Policy

// optional uint32 svr_type = 1;
inline bool Policy::has_svr_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Policy::set_has_svr_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Policy::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Policy::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 Policy::svr_type() const {
  // @@protoc_insertion_point(field_get:config.Policy.svr_type)
  return svr_type_;
}
inline void Policy::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
  // @@protoc_insertion_point(field_set:config.Policy.svr_type)
}

// optional uint32 policy = 2;
inline bool Policy::has_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Policy::set_has_policy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Policy::clear_has_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Policy::clear_policy() {
  policy_ = 0u;
  clear_has_policy();
}
inline ::google::protobuf::uint32 Policy::policy() const {
  // @@protoc_insertion_point(field_get:config.Policy.policy)
  return policy_;
}
inline void Policy::set_policy(::google::protobuf::uint32 value) {
  set_has_policy();
  policy_ = value;
  // @@protoc_insertion_point(field_set:config.Policy.policy)
}

// -------------------------------------------------------------------

// RouterSvrConfig

// repeated .config.ListenInfo listen_list = 1;
inline int RouterSvrConfig::listen_list_size() const {
  return listen_list_.size();
}
inline void RouterSvrConfig::clear_listen_list() {
  listen_list_.Clear();
}
inline const ::config::ListenInfo& RouterSvrConfig::listen_list(int index) const {
  // @@protoc_insertion_point(field_get:config.RouterSvrConfig.listen_list)
  return listen_list_.Get(index);
}
inline ::config::ListenInfo* RouterSvrConfig::mutable_listen_list(int index) {
  // @@protoc_insertion_point(field_mutable:config.RouterSvrConfig.listen_list)
  return listen_list_.Mutable(index);
}
inline ::config::ListenInfo* RouterSvrConfig::add_listen_list() {
  // @@protoc_insertion_point(field_add:config.RouterSvrConfig.listen_list)
  return listen_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::config::ListenInfo >*
RouterSvrConfig::mutable_listen_list() {
  // @@protoc_insertion_point(field_mutable_list:config.RouterSvrConfig.listen_list)
  return &listen_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::config::ListenInfo >&
RouterSvrConfig::listen_list() const {
  // @@protoc_insertion_point(field_list:config.RouterSvrConfig.listen_list)
  return listen_list_;
}

// repeated int32 legal_svr_list = 2;
inline int RouterSvrConfig::legal_svr_list_size() const {
  return legal_svr_list_.size();
}
inline void RouterSvrConfig::clear_legal_svr_list() {
  legal_svr_list_.Clear();
}
inline ::google::protobuf::int32 RouterSvrConfig::legal_svr_list(int index) const {
  // @@protoc_insertion_point(field_get:config.RouterSvrConfig.legal_svr_list)
  return legal_svr_list_.Get(index);
}
inline void RouterSvrConfig::set_legal_svr_list(int index, ::google::protobuf::int32 value) {
  legal_svr_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:config.RouterSvrConfig.legal_svr_list)
}
inline void RouterSvrConfig::add_legal_svr_list(::google::protobuf::int32 value) {
  legal_svr_list_.Add(value);
  // @@protoc_insertion_point(field_add:config.RouterSvrConfig.legal_svr_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RouterSvrConfig::legal_svr_list() const {
  // @@protoc_insertion_point(field_list:config.RouterSvrConfig.legal_svr_list)
  return legal_svr_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RouterSvrConfig::mutable_legal_svr_list() {
  // @@protoc_insertion_point(field_mutable_list:config.RouterSvrConfig.legal_svr_list)
  return &legal_svr_list_;
}

// repeated .config.Policy policy_list = 3;
inline int RouterSvrConfig::policy_list_size() const {
  return policy_list_.size();
}
inline void RouterSvrConfig::clear_policy_list() {
  policy_list_.Clear();
}
inline const ::config::Policy& RouterSvrConfig::policy_list(int index) const {
  // @@protoc_insertion_point(field_get:config.RouterSvrConfig.policy_list)
  return policy_list_.Get(index);
}
inline ::config::Policy* RouterSvrConfig::mutable_policy_list(int index) {
  // @@protoc_insertion_point(field_mutable:config.RouterSvrConfig.policy_list)
  return policy_list_.Mutable(index);
}
inline ::config::Policy* RouterSvrConfig::add_policy_list() {
  // @@protoc_insertion_point(field_add:config.RouterSvrConfig.policy_list)
  return policy_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::config::Policy >*
RouterSvrConfig::mutable_policy_list() {
  // @@protoc_insertion_point(field_mutable_list:config.RouterSvrConfig.policy_list)
  return &policy_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::config::Policy >&
RouterSvrConfig::policy_list() const {
  // @@protoc_insertion_point(field_list:config.RouterSvrConfig.policy_list)
  return policy_list_;
}

// optional int32 svr_inst_id = 4;
inline bool RouterSvrConfig::has_svr_inst_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RouterSvrConfig::set_has_svr_inst_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RouterSvrConfig::clear_has_svr_inst_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RouterSvrConfig::clear_svr_inst_id() {
  svr_inst_id_ = 0;
  clear_has_svr_inst_id();
}
inline ::google::protobuf::int32 RouterSvrConfig::svr_inst_id() const {
  // @@protoc_insertion_point(field_get:config.RouterSvrConfig.svr_inst_id)
  return svr_inst_id_;
}
inline void RouterSvrConfig::set_svr_inst_id(::google::protobuf::int32 value) {
  set_has_svr_inst_id();
  svr_inst_id_ = value;
  // @@protoc_insertion_point(field_set:config.RouterSvrConfig.svr_inst_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::config::PolicyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::PolicyType>() {
  return ::config::PolicyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_routersvr_5fconfig_2eproto__INCLUDED
