// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svr_base.proto

#ifndef PROTOBUF_svr_5fbase_2eproto__INCLUDED
#define PROTOBUF_svr_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_svr_5fbase_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRetImpl();
void InitDefaultsRet();
void InitDefaultsSocketClientInImpl();
void InitDefaultsSocketClientIn();
void InitDefaultsSocketClientOutImpl();
void InitDefaultsSocketClientOut();
void InitDefaultsRegisterServerReqImpl();
void InitDefaultsRegisterServerReq();
void InitDefaultsRegisterServerRspImpl();
void InitDefaultsRegisterServerRsp();
void InitDefaultsSvrHeatBeatImpl();
void InitDefaultsSvrHeatBeat();
inline void InitDefaults() {
  InitDefaultsRet();
  InitDefaultsSocketClientIn();
  InitDefaultsSocketClientOut();
  InitDefaultsRegisterServerReq();
  InitDefaultsRegisterServerRsp();
  InitDefaultsSvrHeatBeat();
}
}  // namespace protobuf_svr_5fbase_2eproto
namespace proto {
class RegisterServerReq;
class RegisterServerReqDefaultTypeInternal;
extern RegisterServerReqDefaultTypeInternal _RegisterServerReq_default_instance_;
class RegisterServerRsp;
class RegisterServerRspDefaultTypeInternal;
extern RegisterServerRspDefaultTypeInternal _RegisterServerRsp_default_instance_;
class Ret;
class RetDefaultTypeInternal;
extern RetDefaultTypeInternal _Ret_default_instance_;
class SocketClientIn;
class SocketClientInDefaultTypeInternal;
extern SocketClientInDefaultTypeInternal _SocketClientIn_default_instance_;
class SocketClientOut;
class SocketClientOutDefaultTypeInternal;
extern SocketClientOutDefaultTypeInternal _SocketClientOut_default_instance_;
class SvrHeatBeat;
class SvrHeatBeatDefaultTypeInternal;
extern SvrHeatBeatDefaultTypeInternal _SvrHeatBeat_default_instance_;
}  // namespace proto
namespace proto {

enum ServerType {
  SVR_TYPE_ROUTER = 1,
  SVR_TYPE_CONN = 2
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = SVR_TYPE_ROUTER;
const ServerType ServerType_MAX = SVR_TYPE_CONN;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
// ===================================================================

class Ret : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Ret) */ {
 public:
  Ret();
  virtual ~Ret();

  Ret(const Ret& from);

  inline Ret& operator=(const Ret& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ret(Ret&& from) noexcept
    : Ret() {
    *this = ::std::move(from);
  }

  inline Ret& operator=(Ret&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ret& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ret* internal_default_instance() {
    return reinterpret_cast<const Ret*>(
               &_Ret_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Ret* other);
  friend void swap(Ret& a, Ret& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ret* New() const PROTOBUF_FINAL { return New(NULL); }

  Ret* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ret& from);
  void MergeFrom(const Ret& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ret* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string what = 2;
  bool has_what() const;
  void clear_what();
  static const int kWhatFieldNumber = 2;
  const ::std::string& what() const;
  void set_what(const ::std::string& value);
  #if LANG_CXX11
  void set_what(::std::string&& value);
  #endif
  void set_what(const char* value);
  void set_what(const char* value, size_t size);
  ::std::string* mutable_what();
  ::std::string* release_what();
  void set_allocated_what(::std::string* what);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.Ret)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_what();
  void clear_has_what();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr what_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_svr_5fbase_2eproto::TableStruct;
  friend void ::protobuf_svr_5fbase_2eproto::InitDefaultsRetImpl();
};
// -------------------------------------------------------------------

class SocketClientIn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SocketClientIn) */ {
 public:
  SocketClientIn();
  virtual ~SocketClientIn();

  SocketClientIn(const SocketClientIn& from);

  inline SocketClientIn& operator=(const SocketClientIn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SocketClientIn(SocketClientIn&& from) noexcept
    : SocketClientIn() {
    *this = ::std::move(from);
  }

  inline SocketClientIn& operator=(SocketClientIn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SocketClientIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SocketClientIn* internal_default_instance() {
    return reinterpret_cast<const SocketClientIn*>(
               &_SocketClientIn_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SocketClientIn* other);
  friend void swap(SocketClientIn& a, SocketClientIn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SocketClientIn* New() const PROTOBUF_FINAL { return New(NULL); }

  SocketClientIn* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SocketClientIn& from);
  void MergeFrom(const SocketClientIn& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SocketClientIn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.SocketClientIn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_svr_5fbase_2eproto::TableStruct;
  friend void ::protobuf_svr_5fbase_2eproto::InitDefaultsSocketClientInImpl();
};
// -------------------------------------------------------------------

class SocketClientOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SocketClientOut) */ {
 public:
  SocketClientOut();
  virtual ~SocketClientOut();

  SocketClientOut(const SocketClientOut& from);

  inline SocketClientOut& operator=(const SocketClientOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SocketClientOut(SocketClientOut&& from) noexcept
    : SocketClientOut() {
    *this = ::std::move(from);
  }

  inline SocketClientOut& operator=(SocketClientOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SocketClientOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SocketClientOut* internal_default_instance() {
    return reinterpret_cast<const SocketClientOut*>(
               &_SocketClientOut_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SocketClientOut* other);
  friend void swap(SocketClientOut& a, SocketClientOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SocketClientOut* New() const PROTOBUF_FINAL { return New(NULL); }

  SocketClientOut* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SocketClientOut& from);
  void MergeFrom(const SocketClientOut& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SocketClientOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.SocketClientOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_svr_5fbase_2eproto::TableStruct;
  friend void ::protobuf_svr_5fbase_2eproto::InitDefaultsSocketClientOutImpl();
};
// -------------------------------------------------------------------

class RegisterServerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RegisterServerReq) */ {
 public:
  RegisterServerReq();
  virtual ~RegisterServerReq();

  RegisterServerReq(const RegisterServerReq& from);

  inline RegisterServerReq& operator=(const RegisterServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterServerReq(RegisterServerReq&& from) noexcept
    : RegisterServerReq() {
    *this = ::std::move(from);
  }

  inline RegisterServerReq& operator=(RegisterServerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterServerReq* internal_default_instance() {
    return reinterpret_cast<const RegisterServerReq*>(
               &_RegisterServerReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RegisterServerReq* other);
  friend void swap(RegisterServerReq& a, RegisterServerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterServerReq* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterServerReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterServerReq& from);
  void MergeFrom(const RegisterServerReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterServerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 server_type = 1;
  bool has_server_type() const;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 1;
  ::google::protobuf::int32 server_type() const;
  void set_server_type(::google::protobuf::int32 value);

  // optional int32 instance_id = 2;
  bool has_instance_id() const;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 2;
  ::google::protobuf::int32 instance_id() const;
  void set_instance_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.RegisterServerReq)
 private:
  void set_has_server_type();
  void clear_has_server_type();
  void set_has_instance_id();
  void clear_has_instance_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 server_type_;
  ::google::protobuf::int32 instance_id_;
  friend struct ::protobuf_svr_5fbase_2eproto::TableStruct;
  friend void ::protobuf_svr_5fbase_2eproto::InitDefaultsRegisterServerReqImpl();
};
// -------------------------------------------------------------------

class RegisterServerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RegisterServerRsp) */ {
 public:
  RegisterServerRsp();
  virtual ~RegisterServerRsp();

  RegisterServerRsp(const RegisterServerRsp& from);

  inline RegisterServerRsp& operator=(const RegisterServerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterServerRsp(RegisterServerRsp&& from) noexcept
    : RegisterServerRsp() {
    *this = ::std::move(from);
  }

  inline RegisterServerRsp& operator=(RegisterServerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterServerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterServerRsp* internal_default_instance() {
    return reinterpret_cast<const RegisterServerRsp*>(
               &_RegisterServerRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RegisterServerRsp* other);
  friend void swap(RegisterServerRsp& a, RegisterServerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterServerRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterServerRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterServerRsp& from);
  void MergeFrom(const RegisterServerRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterServerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.Ret ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  const ::proto::Ret& ret() const;
  ::proto::Ret* release_ret();
  ::proto::Ret* mutable_ret();
  void set_allocated_ret(::proto::Ret* ret);

  // @@protoc_insertion_point(class_scope:proto.RegisterServerRsp)
 private:
  void set_has_ret();
  void clear_has_ret();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::proto::Ret* ret_;
  friend struct ::protobuf_svr_5fbase_2eproto::TableStruct;
  friend void ::protobuf_svr_5fbase_2eproto::InitDefaultsRegisterServerRspImpl();
};
// -------------------------------------------------------------------

class SvrHeatBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SvrHeatBeat) */ {
 public:
  SvrHeatBeat();
  virtual ~SvrHeatBeat();

  SvrHeatBeat(const SvrHeatBeat& from);

  inline SvrHeatBeat& operator=(const SvrHeatBeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SvrHeatBeat(SvrHeatBeat&& from) noexcept
    : SvrHeatBeat() {
    *this = ::std::move(from);
  }

  inline SvrHeatBeat& operator=(SvrHeatBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrHeatBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SvrHeatBeat* internal_default_instance() {
    return reinterpret_cast<const SvrHeatBeat*>(
               &_SvrHeatBeat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SvrHeatBeat* other);
  friend void swap(SvrHeatBeat& a, SvrHeatBeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SvrHeatBeat* New() const PROTOBUF_FINAL { return New(NULL); }

  SvrHeatBeat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SvrHeatBeat& from);
  void MergeFrom(const SvrHeatBeat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SvrHeatBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 server_type = 1;
  bool has_server_type() const;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 1;
  ::google::protobuf::int32 server_type() const;
  void set_server_type(::google::protobuf::int32 value);

  // optional int32 instance_id = 2;
  bool has_instance_id() const;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 2;
  ::google::protobuf::int32 instance_id() const;
  void set_instance_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.SvrHeatBeat)
 private:
  void set_has_server_type();
  void clear_has_server_type();
  void set_has_instance_id();
  void clear_has_instance_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 server_type_;
  ::google::protobuf::int32 instance_id_;
  friend struct ::protobuf_svr_5fbase_2eproto::TableStruct;
  friend void ::protobuf_svr_5fbase_2eproto::InitDefaultsSvrHeatBeatImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ret

// optional int32 code = 1;
inline bool Ret::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ret::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ret::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ret::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Ret::code() const {
  // @@protoc_insertion_point(field_get:proto.Ret.code)
  return code_;
}
inline void Ret::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.Ret.code)
}

// optional string what = 2;
inline bool Ret::has_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ret::set_has_what() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ret::clear_has_what() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ret::clear_what() {
  what_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_what();
}
inline const ::std::string& Ret::what() const {
  // @@protoc_insertion_point(field_get:proto.Ret.what)
  return what_.GetNoArena();
}
inline void Ret::set_what(const ::std::string& value) {
  set_has_what();
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Ret.what)
}
#if LANG_CXX11
inline void Ret::set_what(::std::string&& value) {
  set_has_what();
  what_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Ret.what)
}
#endif
inline void Ret::set_what(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_what();
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Ret.what)
}
inline void Ret::set_what(const char* value, size_t size) {
  set_has_what();
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Ret.what)
}
inline ::std::string* Ret::mutable_what() {
  set_has_what();
  // @@protoc_insertion_point(field_mutable:proto.Ret.what)
  return what_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ret::release_what() {
  // @@protoc_insertion_point(field_release:proto.Ret.what)
  clear_has_what();
  return what_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ret::set_allocated_what(::std::string* what) {
  if (what != NULL) {
    set_has_what();
  } else {
    clear_has_what();
  }
  what_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), what);
  // @@protoc_insertion_point(field_set_allocated:proto.Ret.what)
}

// -------------------------------------------------------------------

// SocketClientIn

// -------------------------------------------------------------------

// SocketClientOut

// -------------------------------------------------------------------

// RegisterServerReq

// optional int32 server_type = 1;
inline bool RegisterServerReq::has_server_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterServerReq::set_has_server_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterServerReq::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterServerReq::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::google::protobuf::int32 RegisterServerReq::server_type() const {
  // @@protoc_insertion_point(field_get:proto.RegisterServerReq.server_type)
  return server_type_;
}
inline void RegisterServerReq::set_server_type(::google::protobuf::int32 value) {
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:proto.RegisterServerReq.server_type)
}

// optional int32 instance_id = 2;
inline bool RegisterServerReq::has_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterServerReq::set_has_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterServerReq::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterServerReq::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 RegisterServerReq::instance_id() const {
  // @@protoc_insertion_point(field_get:proto.RegisterServerReq.instance_id)
  return instance_id_;
}
inline void RegisterServerReq::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.RegisterServerReq.instance_id)
}

// -------------------------------------------------------------------

// RegisterServerRsp

// optional .proto.Ret ret = 1;
inline bool RegisterServerRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterServerRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterServerRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterServerRsp::clear_ret() {
  if (ret_ != NULL) ret_->Clear();
  clear_has_ret();
}
inline const ::proto::Ret& RegisterServerRsp::ret() const {
  const ::proto::Ret* p = ret_;
  // @@protoc_insertion_point(field_get:proto.RegisterServerRsp.ret)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Ret*>(
      &::proto::_Ret_default_instance_);
}
inline ::proto::Ret* RegisterServerRsp::release_ret() {
  // @@protoc_insertion_point(field_release:proto.RegisterServerRsp.ret)
  clear_has_ret();
  ::proto::Ret* temp = ret_;
  ret_ = NULL;
  return temp;
}
inline ::proto::Ret* RegisterServerRsp::mutable_ret() {
  set_has_ret();
  if (ret_ == NULL) {
    ret_ = new ::proto::Ret;
  }
  // @@protoc_insertion_point(field_mutable:proto.RegisterServerRsp.ret)
  return ret_;
}
inline void RegisterServerRsp::set_allocated_ret(::proto::Ret* ret) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ret_;
  }
  if (ret) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ret = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ret, submessage_arena);
    }
    set_has_ret();
  } else {
    clear_has_ret();
  }
  ret_ = ret;
  // @@protoc_insertion_point(field_set_allocated:proto.RegisterServerRsp.ret)
}

// -------------------------------------------------------------------

// SvrHeatBeat

// optional int32 server_type = 1;
inline bool SvrHeatBeat::has_server_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrHeatBeat::set_has_server_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrHeatBeat::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrHeatBeat::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::google::protobuf::int32 SvrHeatBeat::server_type() const {
  // @@protoc_insertion_point(field_get:proto.SvrHeatBeat.server_type)
  return server_type_;
}
inline void SvrHeatBeat::set_server_type(::google::protobuf::int32 value) {
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:proto.SvrHeatBeat.server_type)
}

// optional int32 instance_id = 2;
inline bool SvrHeatBeat::has_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrHeatBeat::set_has_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrHeatBeat::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrHeatBeat::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 SvrHeatBeat::instance_id() const {
  // @@protoc_insertion_point(field_get:proto.SvrHeatBeat.instance_id)
  return instance_id_;
}
inline void SvrHeatBeat::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SvrHeatBeat.instance_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::ServerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ServerType>() {
  return ::proto::ServerType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_svr_5fbase_2eproto__INCLUDED
