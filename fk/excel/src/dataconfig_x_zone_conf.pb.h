// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataconfig_x_zone_conf.proto

#ifndef PROTOBUF_dataconfig_5fx_5fzone_5fconf_2eproto__INCLUDED
#define PROTOBUF_dataconfig_5fx_5fzone_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_dataconfig_5fx_5fzone_5fconf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsx_zone_confImpl();
void InitDefaultsx_zone_conf();
void InitDefaultsx_zone_conf_arrayImpl();
void InitDefaultsx_zone_conf_array();
inline void InitDefaults() {
  InitDefaultsx_zone_conf();
  InitDefaultsx_zone_conf_array();
}
}  // namespace protobuf_dataconfig_5fx_5fzone_5fconf_2eproto
namespace dataconfig {
class x_zone_conf;
class x_zone_confDefaultTypeInternal;
extern x_zone_confDefaultTypeInternal _x_zone_conf_default_instance_;
class x_zone_conf_array;
class x_zone_conf_arrayDefaultTypeInternal;
extern x_zone_conf_arrayDefaultTypeInternal _x_zone_conf_array_default_instance_;
}  // namespace dataconfig
namespace dataconfig {

// ===================================================================

class x_zone_conf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataconfig.x_zone_conf) */ {
 public:
  x_zone_conf();
  virtual ~x_zone_conf();

  x_zone_conf(const x_zone_conf& from);

  inline x_zone_conf& operator=(const x_zone_conf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  x_zone_conf(x_zone_conf&& from) noexcept
    : x_zone_conf() {
    *this = ::std::move(from);
  }

  inline x_zone_conf& operator=(x_zone_conf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const x_zone_conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const x_zone_conf* internal_default_instance() {
    return reinterpret_cast<const x_zone_conf*>(
               &_x_zone_conf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(x_zone_conf* other);
  friend void swap(x_zone_conf& a, x_zone_conf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline x_zone_conf* New() const PROTOBUF_FINAL { return New(NULL); }

  x_zone_conf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const x_zone_conf& from);
  void MergeFrom(const x_zone_conf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(x_zone_conf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string location_desc = 2 [default = ""];
  bool has_location_desc() const;
  void clear_location_desc();
  static const int kLocationDescFieldNumber = 2;
  const ::std::string& location_desc() const;
  void set_location_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_location_desc(::std::string&& value);
  #endif
  void set_location_desc(const char* value);
  void set_location_desc(const char* value, size_t size);
  ::std::string* mutable_location_desc();
  ::std::string* release_location_desc();
  void set_allocated_location_desc(::std::string* location_desc);

  // optional string desc = 5 [default = ""];
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 5;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // optional int32 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 zone = 3 [default = 0];
  bool has_zone() const;
  void clear_zone();
  static const int kZoneFieldNumber = 3;
  ::google::protobuf::int32 zone() const;
  void set_zone(::google::protobuf::int32 value);

  // optional int32 name = 4 [default = 0];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  ::google::protobuf::int32 name() const;
  void set_name(::google::protobuf::int32 value);

  // optional int32 is_open = 6 [default = 0];
  bool has_is_open() const;
  void clear_is_open();
  static const int kIsOpenFieldNumber = 6;
  ::google::protobuf::int32 is_open() const;
  void set_is_open(::google::protobuf::int32 value);

  // optional int32 backup = 7 [default = 0];
  bool has_backup() const;
  void clear_backup();
  static const int kBackupFieldNumber = 7;
  ::google::protobuf::int32 backup() const;
  void set_backup(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dataconfig.x_zone_conf)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_location_desc();
  void clear_has_location_desc();
  void set_has_zone();
  void clear_has_zone();
  void set_has_name();
  void clear_has_name();
  void set_has_desc();
  void clear_has_desc();
  void set_has_is_open();
  void clear_has_is_open();
  void set_has_backup();
  void clear_has_backup();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr location_desc_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 zone_;
  ::google::protobuf::int32 name_;
  ::google::protobuf::int32 is_open_;
  ::google::protobuf::int32 backup_;
  friend struct ::protobuf_dataconfig_5fx_5fzone_5fconf_2eproto::TableStruct;
  friend void ::protobuf_dataconfig_5fx_5fzone_5fconf_2eproto::InitDefaultsx_zone_confImpl();
};
// -------------------------------------------------------------------

class x_zone_conf_array : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataconfig.x_zone_conf_array) */ {
 public:
  x_zone_conf_array();
  virtual ~x_zone_conf_array();

  x_zone_conf_array(const x_zone_conf_array& from);

  inline x_zone_conf_array& operator=(const x_zone_conf_array& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  x_zone_conf_array(x_zone_conf_array&& from) noexcept
    : x_zone_conf_array() {
    *this = ::std::move(from);
  }

  inline x_zone_conf_array& operator=(x_zone_conf_array&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const x_zone_conf_array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const x_zone_conf_array* internal_default_instance() {
    return reinterpret_cast<const x_zone_conf_array*>(
               &_x_zone_conf_array_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(x_zone_conf_array* other);
  friend void swap(x_zone_conf_array& a, x_zone_conf_array& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline x_zone_conf_array* New() const PROTOBUF_FINAL { return New(NULL); }

  x_zone_conf_array* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const x_zone_conf_array& from);
  void MergeFrom(const x_zone_conf_array& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(x_zone_conf_array* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dataconfig.x_zone_conf items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::dataconfig::x_zone_conf& items(int index) const;
  ::dataconfig::x_zone_conf* mutable_items(int index);
  ::dataconfig::x_zone_conf* add_items();
  ::google::protobuf::RepeatedPtrField< ::dataconfig::x_zone_conf >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::dataconfig::x_zone_conf >&
      items() const;

  // @@protoc_insertion_point(class_scope:dataconfig.x_zone_conf_array)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dataconfig::x_zone_conf > items_;
  friend struct ::protobuf_dataconfig_5fx_5fzone_5fconf_2eproto::TableStruct;
  friend void ::protobuf_dataconfig_5fx_5fzone_5fconf_2eproto::InitDefaultsx_zone_conf_arrayImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// x_zone_conf

// optional int32 id = 1 [default = 0];
inline bool x_zone_conf::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void x_zone_conf::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void x_zone_conf::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void x_zone_conf::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 x_zone_conf::id() const {
  // @@protoc_insertion_point(field_get:dataconfig.x_zone_conf.id)
  return id_;
}
inline void x_zone_conf::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:dataconfig.x_zone_conf.id)
}

// optional string location_desc = 2 [default = ""];
inline bool x_zone_conf::has_location_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void x_zone_conf::set_has_location_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void x_zone_conf::clear_has_location_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void x_zone_conf::clear_location_desc() {
  location_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_location_desc();
}
inline const ::std::string& x_zone_conf::location_desc() const {
  // @@protoc_insertion_point(field_get:dataconfig.x_zone_conf.location_desc)
  return location_desc_.GetNoArena();
}
inline void x_zone_conf::set_location_desc(const ::std::string& value) {
  set_has_location_desc();
  location_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataconfig.x_zone_conf.location_desc)
}
#if LANG_CXX11
inline void x_zone_conf::set_location_desc(::std::string&& value) {
  set_has_location_desc();
  location_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataconfig.x_zone_conf.location_desc)
}
#endif
inline void x_zone_conf::set_location_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location_desc();
  location_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataconfig.x_zone_conf.location_desc)
}
inline void x_zone_conf::set_location_desc(const char* value, size_t size) {
  set_has_location_desc();
  location_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataconfig.x_zone_conf.location_desc)
}
inline ::std::string* x_zone_conf::mutable_location_desc() {
  set_has_location_desc();
  // @@protoc_insertion_point(field_mutable:dataconfig.x_zone_conf.location_desc)
  return location_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* x_zone_conf::release_location_desc() {
  // @@protoc_insertion_point(field_release:dataconfig.x_zone_conf.location_desc)
  clear_has_location_desc();
  return location_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void x_zone_conf::set_allocated_location_desc(::std::string* location_desc) {
  if (location_desc != NULL) {
    set_has_location_desc();
  } else {
    clear_has_location_desc();
  }
  location_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_desc);
  // @@protoc_insertion_point(field_set_allocated:dataconfig.x_zone_conf.location_desc)
}

// optional int32 zone = 3 [default = 0];
inline bool x_zone_conf::has_zone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void x_zone_conf::set_has_zone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void x_zone_conf::clear_has_zone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void x_zone_conf::clear_zone() {
  zone_ = 0;
  clear_has_zone();
}
inline ::google::protobuf::int32 x_zone_conf::zone() const {
  // @@protoc_insertion_point(field_get:dataconfig.x_zone_conf.zone)
  return zone_;
}
inline void x_zone_conf::set_zone(::google::protobuf::int32 value) {
  set_has_zone();
  zone_ = value;
  // @@protoc_insertion_point(field_set:dataconfig.x_zone_conf.zone)
}

// optional int32 name = 4 [default = 0];
inline bool x_zone_conf::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void x_zone_conf::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void x_zone_conf::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void x_zone_conf::clear_name() {
  name_ = 0;
  clear_has_name();
}
inline ::google::protobuf::int32 x_zone_conf::name() const {
  // @@protoc_insertion_point(field_get:dataconfig.x_zone_conf.name)
  return name_;
}
inline void x_zone_conf::set_name(::google::protobuf::int32 value) {
  set_has_name();
  name_ = value;
  // @@protoc_insertion_point(field_set:dataconfig.x_zone_conf.name)
}

// optional string desc = 5 [default = ""];
inline bool x_zone_conf::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void x_zone_conf::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void x_zone_conf::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void x_zone_conf::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& x_zone_conf::desc() const {
  // @@protoc_insertion_point(field_get:dataconfig.x_zone_conf.desc)
  return desc_.GetNoArena();
}
inline void x_zone_conf::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataconfig.x_zone_conf.desc)
}
#if LANG_CXX11
inline void x_zone_conf::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataconfig.x_zone_conf.desc)
}
#endif
inline void x_zone_conf::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataconfig.x_zone_conf.desc)
}
inline void x_zone_conf::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataconfig.x_zone_conf.desc)
}
inline ::std::string* x_zone_conf::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:dataconfig.x_zone_conf.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* x_zone_conf::release_desc() {
  // @@protoc_insertion_point(field_release:dataconfig.x_zone_conf.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void x_zone_conf::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:dataconfig.x_zone_conf.desc)
}

// optional int32 is_open = 6 [default = 0];
inline bool x_zone_conf::has_is_open() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void x_zone_conf::set_has_is_open() {
  _has_bits_[0] |= 0x00000020u;
}
inline void x_zone_conf::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void x_zone_conf::clear_is_open() {
  is_open_ = 0;
  clear_has_is_open();
}
inline ::google::protobuf::int32 x_zone_conf::is_open() const {
  // @@protoc_insertion_point(field_get:dataconfig.x_zone_conf.is_open)
  return is_open_;
}
inline void x_zone_conf::set_is_open(::google::protobuf::int32 value) {
  set_has_is_open();
  is_open_ = value;
  // @@protoc_insertion_point(field_set:dataconfig.x_zone_conf.is_open)
}

// optional int32 backup = 7 [default = 0];
inline bool x_zone_conf::has_backup() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void x_zone_conf::set_has_backup() {
  _has_bits_[0] |= 0x00000040u;
}
inline void x_zone_conf::clear_has_backup() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void x_zone_conf::clear_backup() {
  backup_ = 0;
  clear_has_backup();
}
inline ::google::protobuf::int32 x_zone_conf::backup() const {
  // @@protoc_insertion_point(field_get:dataconfig.x_zone_conf.backup)
  return backup_;
}
inline void x_zone_conf::set_backup(::google::protobuf::int32 value) {
  set_has_backup();
  backup_ = value;
  // @@protoc_insertion_point(field_set:dataconfig.x_zone_conf.backup)
}

// -------------------------------------------------------------------

// x_zone_conf_array

// repeated .dataconfig.x_zone_conf items = 1;
inline int x_zone_conf_array::items_size() const {
  return items_.size();
}
inline void x_zone_conf_array::clear_items() {
  items_.Clear();
}
inline const ::dataconfig::x_zone_conf& x_zone_conf_array::items(int index) const {
  // @@protoc_insertion_point(field_get:dataconfig.x_zone_conf_array.items)
  return items_.Get(index);
}
inline ::dataconfig::x_zone_conf* x_zone_conf_array::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:dataconfig.x_zone_conf_array.items)
  return items_.Mutable(index);
}
inline ::dataconfig::x_zone_conf* x_zone_conf_array::add_items() {
  // @@protoc_insertion_point(field_add:dataconfig.x_zone_conf_array.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dataconfig::x_zone_conf >*
x_zone_conf_array::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:dataconfig.x_zone_conf_array.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dataconfig::x_zone_conf >&
x_zone_conf_array::items() const {
  // @@protoc_insertion_point(field_list:dataconfig.x_zone_conf_array.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataconfig

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dataconfig_5fx_5fzone_5fconf_2eproto__INCLUDED
