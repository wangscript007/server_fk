// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbtool.proto

#include "dbtool.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace dbtool {
class TableFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableField>
      _instance;
} _TableField_default_instance_;
class TableKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableKey>
      _instance;
} _TableKey_default_instance_;
class MysqlTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MysqlTable>
      _instance;
} _MysqlTable_default_instance_;
class MysqlSchemaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MysqlSchema>
      _instance;
} _MysqlSchema_default_instance_;
class MysqlSchemaConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MysqlSchemaConf>
      _instance;
} _MysqlSchemaConf_default_instance_;
}  // namespace dbtool
namespace protobuf_dbtool_2eproto {
void InitDefaultsTableFieldImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::dbtool::_TableField_default_instance_;
    new (ptr) ::dbtool::TableField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbtool::TableField::InitAsDefaultInstance();
}

void InitDefaultsTableField() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableFieldImpl);
}

void InitDefaultsTableKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::dbtool::_TableKey_default_instance_;
    new (ptr) ::dbtool::TableKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbtool::TableKey::InitAsDefaultInstance();
}

void InitDefaultsTableKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableKeyImpl);
}

void InitDefaultsMysqlTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_dbtool_2eproto::InitDefaultsTableField();
  protobuf_dbtool_2eproto::InitDefaultsTableKey();
  {
    void* ptr = &::dbtool::_MysqlTable_default_instance_;
    new (ptr) ::dbtool::MysqlTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbtool::MysqlTable::InitAsDefaultInstance();
}

void InitDefaultsMysqlTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMysqlTableImpl);
}

void InitDefaultsMysqlSchemaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_dbtool_2eproto::InitDefaultsMysqlTable();
  {
    void* ptr = &::dbtool::_MysqlSchema_default_instance_;
    new (ptr) ::dbtool::MysqlSchema();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbtool::MysqlSchema::InitAsDefaultInstance();
}

void InitDefaultsMysqlSchema() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMysqlSchemaImpl);
}

void InitDefaultsMysqlSchemaConfImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_dbtool_2eproto::InitDefaultsMysqlSchema();
  {
    void* ptr = &::dbtool::_MysqlSchemaConf_default_instance_;
    new (ptr) ::dbtool::MysqlSchemaConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbtool::MysqlSchemaConf::InitAsDefaultInstance();
}

void InitDefaultsMysqlSchemaConf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMysqlSchemaConfImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, not_null_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, auto_incr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, default__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, add_col_after_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, rename_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, modify_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, varchar_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableField, is_delete_),
  0,
  8,
  4,
  5,
  1,
  2,
  3,
  9,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableKey, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::TableKey, fields_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlTable, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlTable, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlTable, keys_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchema, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchema, mysql_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchema, mysql_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchema, mysql_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchema, mysql_passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchema, schema_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchema, tables_),
  0,
  4,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchemaConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchemaConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbtool::MysqlSchemaConf, mysql_schemas_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::dbtool::TableField)},
  { 25, 33, sizeof(::dbtool::TableKey)},
  { 36, 44, sizeof(::dbtool::MysqlTable)},
  { 47, 58, sizeof(::dbtool::MysqlSchema)},
  { 64, 70, sizeof(::dbtool::MysqlSchemaConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbtool::_TableField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbtool::_TableKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbtool::_MysqlTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbtool::_MysqlSchema_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbtool::_MysqlSchemaConf_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dbtool.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014dbtool.proto\022\006dbtool\"\374\001\n\nTableField\022\014\n"
      "\004name\030\001 \001(\t\022$\n\004type\030\002 \001(\0162\026.dbtool.Mysql"
      "FieldType\022\020\n\010not_null\030\003 \001(\010\022\021\n\tauto_incr"
      "\030\004 \001(\010\022\017\n\007default\030\005 \001(\t\022\025\n\radd_col_after"
      "\030\006 \001(\t\022\023\n\013rename_from\030\007 \001(\t\022+\n\013modify_ty"
      "pe\030\010 \001(\0162\026.dbtool.MysqlFieldType\022\030\n\013varc"
      "har_len\030\t \001(\r:\003255\022\021\n\tis_delete\030\n \001(\010\"L\n"
      "\010TableKey\022\014\n\004name\030\001 \001(\t\022\"\n\004type\030\002 \001(\0162\024."
      "dbtool.MysqlKeyType\022\016\n\006fields\030\003 \003(\t\"d\n\nM"
      "ysqlTable\022\022\n\ntable_name\030\001 \001(\t\022\"\n\006fields\030"
      "\002 \003(\0132\022.dbtool.TableField\022\036\n\004keys\030\003 \003(\0132"
      "\020.dbtool.TableKey\"\226\001\n\013MysqlSchema\022\020\n\010mys"
      "ql_ip\030\001 \001(\t\022\022\n\nmysql_port\030\002 \001(\r\022\022\n\nmysql"
      "_user\030\003 \001(\t\022\024\n\014mysql_passwd\030\004 \001(\t\022\023\n\013sch"
      "ema_name\030\005 \001(\t\022\"\n\006tables\030\006 \003(\0132\022.dbtool."
      "MysqlTable\"=\n\017MysqlSchemaConf\022*\n\rmysql_s"
      "chemas\030\001 \003(\0132\023.dbtool.MysqlSchema*\226\002\n\016My"
      "sqlFieldType\022\027\n\023E_FieldType_TinyInt\020\001\022\023\n"
      "\017E_FieldType_Int\020\002\022\024\n\020E_FieldType_UInt\020\003"
      "\022\026\n\022E_FieldType_BigInt\020\004\022\026\n\022E_FieldType_"
      "Double\020\005\022\027\n\023E_FieldType_Varchar\020\006\022\024\n\020E_F"
      "ieldType_Blob\020\007\022\032\n\026E_FieldType_MediumBlo"
      "b\020\010\022\024\n\020E_FieldType_Date\020\t\022\024\n\020E_FieldType"
      "_Time\020\n\022\031\n\025E_FieldType_TimeStamp\020\013*Q\n\014My"
      "sqlKeyType\022\025\n\021E_KeyType_Primary\020\001\022\024\n\020E_K"
      "eyType_Normal\020\002\022\024\n\020E_KeyType_Unique\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1037);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbtool.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dbtool_2eproto
namespace dbtool {
const ::google::protobuf::EnumDescriptor* MysqlFieldType_descriptor() {
  protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbtool_2eproto::file_level_enum_descriptors[0];
}
bool MysqlFieldType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MysqlKeyType_descriptor() {
  protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbtool_2eproto::file_level_enum_descriptors[1];
}
bool MysqlKeyType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TableField::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableField::kNameFieldNumber;
const int TableField::kTypeFieldNumber;
const int TableField::kNotNullFieldNumber;
const int TableField::kAutoIncrFieldNumber;
const int TableField::kDefaultFieldNumber;
const int TableField::kAddColAfterFieldNumber;
const int TableField::kRenameFromFieldNumber;
const int TableField::kModifyTypeFieldNumber;
const int TableField::kVarcharLenFieldNumber;
const int TableField::kIsDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableField::TableField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dbtool_2eproto::InitDefaultsTableField();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbtool.TableField)
}
TableField::TableField(const TableField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  default__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_()) {
    default__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default__);
  }
  add_col_after_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_add_col_after()) {
    add_col_after_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_col_after_);
  }
  rename_from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rename_from()) {
    rename_from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rename_from_);
  }
  ::memcpy(&not_null_, &from.not_null_,
    static_cast<size_t>(reinterpret_cast<char*>(&modify_type_) -
    reinterpret_cast<char*>(&not_null_)) + sizeof(modify_type_));
  // @@protoc_insertion_point(copy_constructor:dbtool.TableField)
}

void TableField::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_col_after_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rename_from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&not_null_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_delete_) -
      reinterpret_cast<char*>(&not_null_)) + sizeof(is_delete_));
  varchar_len_ = 255u;
  type_ = 1;
  modify_type_ = 1;
}

TableField::~TableField() {
  // @@protoc_insertion_point(destructor:dbtool.TableField)
  SharedDtor();
}

void TableField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_col_after_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rename_from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableField::descriptor() {
  ::protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbtool_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableField& TableField::default_instance() {
  ::protobuf_dbtool_2eproto::InitDefaultsTableField();
  return *internal_default_instance();
}

TableField* TableField::New(::google::protobuf::Arena* arena) const {
  TableField* n = new TableField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableField::Clear() {
// @@protoc_insertion_point(message_clear_start:dbtool.TableField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!default__.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*default__.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!add_col_after_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*add_col_after_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!rename_from_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rename_from_.UnsafeRawStringPointer())->clear();
    }
  }
  ::memset(&not_null_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_delete_) -
      reinterpret_cast<char*>(&not_null_)) + sizeof(is_delete_));
  varchar_len_ = 255u;
  if (cached_has_bits & 768u) {
    type_ = 1;
    modify_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TableField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbtool.TableField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.TableField.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dbtool.MysqlFieldType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dbtool::MysqlFieldType_IsValid(value)) {
            set_type(static_cast< ::dbtool::MysqlFieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool not_null = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_not_null();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_null_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_incr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_auto_incr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_incr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_().data(), static_cast<int>(this->default_().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.TableField.default");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string add_col_after = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_add_col_after()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->add_col_after().data(), static_cast<int>(this->add_col_after().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.TableField.add_col_after");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rename_from = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rename_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rename_from().data(), static_cast<int>(this->rename_from().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.TableField.rename_from");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dbtool.MysqlFieldType modify_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dbtool::MysqlFieldType_IsValid(value)) {
            set_modify_type(static_cast< ::dbtool::MysqlFieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 varchar_len = 9 [default = 255];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_varchar_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &varchar_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_delete = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_delete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbtool.TableField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbtool.TableField)
  return false;
#undef DO_
}

void TableField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbtool.TableField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .dbtool.MysqlFieldType type = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool not_null = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->not_null(), output);
  }

  // optional bool auto_incr = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->auto_incr(), output);
  }

  // optional string default = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_().data(), static_cast<int>(this->default_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableField.default");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->default_(), output);
  }

  // optional string add_col_after = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->add_col_after().data(), static_cast<int>(this->add_col_after().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableField.add_col_after");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->add_col_after(), output);
  }

  // optional string rename_from = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rename_from().data(), static_cast<int>(this->rename_from().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableField.rename_from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rename_from(), output);
  }

  // optional .dbtool.MysqlFieldType modify_type = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->modify_type(), output);
  }

  // optional uint32 varchar_len = 9 [default = 255];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->varchar_len(), output);
  }

  // optional bool is_delete = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_delete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dbtool.TableField)
}

::google::protobuf::uint8* TableField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbtool.TableField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dbtool.MysqlFieldType type = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool not_null = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->not_null(), target);
  }

  // optional bool auto_incr = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->auto_incr(), target);
  }

  // optional string default = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_().data(), static_cast<int>(this->default_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableField.default");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->default_(), target);
  }

  // optional string add_col_after = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->add_col_after().data(), static_cast<int>(this->add_col_after().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableField.add_col_after");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->add_col_after(), target);
  }

  // optional string rename_from = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rename_from().data(), static_cast<int>(this->rename_from().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableField.rename_from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rename_from(), target);
  }

  // optional .dbtool.MysqlFieldType modify_type = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->modify_type(), target);
  }

  // optional uint32 varchar_len = 9 [default = 255];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->varchar_len(), target);
  }

  // optional bool is_delete = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_delete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbtool.TableField)
  return target;
}

size_t TableField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbtool.TableField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string default = 5;
    if (has_default_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_());
    }

    // optional string add_col_after = 6;
    if (has_add_col_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->add_col_after());
    }

    // optional string rename_from = 7;
    if (has_rename_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rename_from());
    }

    // optional bool not_null = 3;
    if (has_not_null()) {
      total_size += 1 + 1;
    }

    // optional bool auto_incr = 4;
    if (has_auto_incr()) {
      total_size += 1 + 1;
    }

    // optional bool is_delete = 10;
    if (has_is_delete()) {
      total_size += 1 + 1;
    }

    // optional uint32 varchar_len = 9 [default = 255];
    if (has_varchar_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->varchar_len());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .dbtool.MysqlFieldType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .dbtool.MysqlFieldType modify_type = 8;
    if (has_modify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modify_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbtool.TableField)
  GOOGLE_DCHECK_NE(&from, this);
  const TableField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbtool.TableField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbtool.TableField)
    MergeFrom(*source);
  }
}

void TableField::MergeFrom(const TableField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbtool.TableField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_default_();
      default__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default__);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_add_col_after();
      add_col_after_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_col_after_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_rename_from();
      rename_from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rename_from_);
    }
    if (cached_has_bits & 0x00000010u) {
      not_null_ = from.not_null_;
    }
    if (cached_has_bits & 0x00000020u) {
      auto_incr_ = from.auto_incr_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_delete_ = from.is_delete_;
    }
    if (cached_has_bits & 0x00000080u) {
      varchar_len_ = from.varchar_len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      modify_type_ = from.modify_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TableField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbtool.TableField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableField::CopyFrom(const TableField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbtool.TableField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableField::IsInitialized() const {
  return true;
}

void TableField::Swap(TableField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableField::InternalSwap(TableField* other) {
  using std::swap;
  name_.Swap(&other->name_);
  default__.Swap(&other->default__);
  add_col_after_.Swap(&other->add_col_after_);
  rename_from_.Swap(&other->rename_from_);
  swap(not_null_, other->not_null_);
  swap(auto_incr_, other->auto_incr_);
  swap(is_delete_, other->is_delete_);
  swap(varchar_len_, other->varchar_len_);
  swap(type_, other->type_);
  swap(modify_type_, other->modify_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableField::GetMetadata() const {
  protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbtool_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableKey::kNameFieldNumber;
const int TableKey::kTypeFieldNumber;
const int TableKey::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableKey::TableKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dbtool_2eproto::InitDefaultsTableKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbtool.TableKey)
}
TableKey::TableKey(const TableKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:dbtool.TableKey)
}

void TableKey::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

TableKey::~TableKey() {
  // @@protoc_insertion_point(destructor:dbtool.TableKey)
  SharedDtor();
}

void TableKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableKey::descriptor() {
  ::protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbtool_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableKey& TableKey::default_instance() {
  ::protobuf_dbtool_2eproto::InitDefaultsTableKey();
  return *internal_default_instance();
}

TableKey* TableKey::New(::google::protobuf::Arena* arena) const {
  TableKey* n = new TableKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableKey::Clear() {
// @@protoc_insertion_point(message_clear_start:dbtool.TableKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TableKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbtool.TableKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.TableKey.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dbtool.MysqlKeyType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dbtool::MysqlKeyType_IsValid(value)) {
            set_type(static_cast< ::dbtool::MysqlKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.TableKey.fields");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbtool.TableKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbtool.TableKey)
  return false;
#undef DO_
}

void TableKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbtool.TableKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .dbtool.MysqlKeyType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated string fields = 3;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableKey.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dbtool.TableKey)
}

::google::protobuf::uint8* TableKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbtool.TableKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dbtool.MysqlKeyType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated string fields = 3;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.TableKey.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbtool.TableKey)
  return target;
}

size_t TableKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbtool.TableKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string fields = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dbtool.MysqlKeyType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbtool.TableKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TableKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbtool.TableKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbtool.TableKey)
    MergeFrom(*source);
  }
}

void TableKey::MergeFrom(const TableKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbtool.TableKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TableKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbtool.TableKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableKey::CopyFrom(const TableKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbtool.TableKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableKey::IsInitialized() const {
  return true;
}

void TableKey::Swap(TableKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableKey::InternalSwap(TableKey* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableKey::GetMetadata() const {
  protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbtool_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MysqlTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MysqlTable::kTableNameFieldNumber;
const int MysqlTable::kFieldsFieldNumber;
const int MysqlTable::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlTable::MysqlTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dbtool_2eproto::InitDefaultsMysqlTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbtool.MysqlTable)
}
MysqlTable::MysqlTable(const MysqlTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fields_(from.fields_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:dbtool.MysqlTable)
}

void MysqlTable::SharedCtor() {
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MysqlTable::~MysqlTable() {
  // @@protoc_insertion_point(destructor:dbtool.MysqlTable)
  SharedDtor();
}

void MysqlTable::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MysqlTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlTable::descriptor() {
  ::protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbtool_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MysqlTable& MysqlTable::default_instance() {
  ::protobuf_dbtool_2eproto::InitDefaultsMysqlTable();
  return *internal_default_instance();
}

MysqlTable* MysqlTable::New(::google::protobuf::Arena* arena) const {
  MysqlTable* n = new MysqlTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MysqlTable::Clear() {
// @@protoc_insertion_point(message_clear_start:dbtool.MysqlTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!table_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*table_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MysqlTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbtool.MysqlTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.MysqlTable.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dbtool.TableField fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dbtool.TableKey keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbtool.MysqlTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbtool.MysqlTable)
  return false;
#undef DO_
}

void MysqlTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbtool.MysqlTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.MysqlTable.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .dbtool.TableField fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fields(static_cast<int>(i)), output);
  }

  // repeated .dbtool.TableKey keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dbtool.MysqlTable)
}

::google::protobuf::uint8* MysqlTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbtool.MysqlTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.MysqlTable.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // repeated .dbtool.TableField fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->fields(static_cast<int>(i)), deterministic, target);
  }

  // repeated .dbtool.TableKey keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->keys(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbtool.MysqlTable)
  return target;
}

size_t MysqlTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbtool.MysqlTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .dbtool.TableField fields = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fields(static_cast<int>(i)));
    }
  }

  // repeated .dbtool.TableKey keys = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  // optional string table_name = 1;
  if (has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbtool.MysqlTable)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MysqlTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbtool.MysqlTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbtool.MysqlTable)
    MergeFrom(*source);
  }
}

void MysqlTable::MergeFrom(const MysqlTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbtool.MysqlTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  keys_.MergeFrom(from.keys_);
  if (from.has_table_name()) {
    set_has_table_name();
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void MysqlTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbtool.MysqlTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlTable::CopyFrom(const MysqlTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbtool.MysqlTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlTable::IsInitialized() const {
  return true;
}

void MysqlTable::Swap(MysqlTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlTable::InternalSwap(MysqlTable* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  keys_.InternalSwap(&other->keys_);
  table_name_.Swap(&other->table_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MysqlTable::GetMetadata() const {
  protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbtool_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MysqlSchema::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MysqlSchema::kMysqlIpFieldNumber;
const int MysqlSchema::kMysqlPortFieldNumber;
const int MysqlSchema::kMysqlUserFieldNumber;
const int MysqlSchema::kMysqlPasswdFieldNumber;
const int MysqlSchema::kSchemaNameFieldNumber;
const int MysqlSchema::kTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlSchema::MysqlSchema()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dbtool_2eproto::InitDefaultsMysqlSchema();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbtool.MysqlSchema)
}
MysqlSchema::MysqlSchema(const MysqlSchema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mysql_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mysql_ip()) {
    mysql_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mysql_ip_);
  }
  mysql_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mysql_user()) {
    mysql_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mysql_user_);
  }
  mysql_passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mysql_passwd()) {
    mysql_passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mysql_passwd_);
  }
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_name()) {
    schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
  }
  mysql_port_ = from.mysql_port_;
  // @@protoc_insertion_point(copy_constructor:dbtool.MysqlSchema)
}

void MysqlSchema::SharedCtor() {
  _cached_size_ = 0;
  mysql_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mysql_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mysql_passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mysql_port_ = 0u;
}

MysqlSchema::~MysqlSchema() {
  // @@protoc_insertion_point(destructor:dbtool.MysqlSchema)
  SharedDtor();
}

void MysqlSchema::SharedDtor() {
  mysql_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mysql_user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mysql_passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MysqlSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlSchema::descriptor() {
  ::protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbtool_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MysqlSchema& MysqlSchema::default_instance() {
  ::protobuf_dbtool_2eproto::InitDefaultsMysqlSchema();
  return *internal_default_instance();
}

MysqlSchema* MysqlSchema::New(::google::protobuf::Arena* arena) const {
  MysqlSchema* n = new MysqlSchema;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MysqlSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:dbtool.MysqlSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!mysql_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mysql_ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mysql_user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mysql_user_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!mysql_passwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mysql_passwd_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!schema_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*schema_name_.UnsafeRawStringPointer())->clear();
    }
  }
  mysql_port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MysqlSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbtool.MysqlSchema)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mysql_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysql_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mysql_ip().data(), static_cast<int>(this->mysql_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.MysqlSchema.mysql_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mysql_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mysql_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mysql_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mysql_user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysql_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mysql_user().data(), static_cast<int>(this->mysql_user().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.MysqlSchema.mysql_user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mysql_passwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysql_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mysql_passwd().data(), static_cast<int>(this->mysql_passwd().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.MysqlSchema.mysql_passwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), static_cast<int>(this->schema_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbtool.MysqlSchema.schema_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dbtool.MysqlTable tables = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbtool.MysqlSchema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbtool.MysqlSchema)
  return false;
#undef DO_
}

void MysqlSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbtool.MysqlSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mysql_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mysql_ip().data(), static_cast<int>(this->mysql_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.MysqlSchema.mysql_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mysql_ip(), output);
  }

  // optional uint32 mysql_port = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mysql_port(), output);
  }

  // optional string mysql_user = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mysql_user().data(), static_cast<int>(this->mysql_user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.MysqlSchema.mysql_user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mysql_user(), output);
  }

  // optional string mysql_passwd = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mysql_passwd().data(), static_cast<int>(this->mysql_passwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.MysqlSchema.mysql_passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mysql_passwd(), output);
  }

  // optional string schema_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.MysqlSchema.schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->schema_name(), output);
  }

  // repeated .dbtool.MysqlTable tables = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tables(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dbtool.MysqlSchema)
}

::google::protobuf::uint8* MysqlSchema::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbtool.MysqlSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mysql_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mysql_ip().data(), static_cast<int>(this->mysql_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.MysqlSchema.mysql_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mysql_ip(), target);
  }

  // optional uint32 mysql_port = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mysql_port(), target);
  }

  // optional string mysql_user = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mysql_user().data(), static_cast<int>(this->mysql_user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.MysqlSchema.mysql_user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mysql_user(), target);
  }

  // optional string mysql_passwd = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mysql_passwd().data(), static_cast<int>(this->mysql_passwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.MysqlSchema.mysql_passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mysql_passwd(), target);
  }

  // optional string schema_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbtool.MysqlSchema.schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->schema_name(), target);
  }

  // repeated .dbtool.MysqlTable tables = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->tables(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbtool.MysqlSchema)
  return target;
}

size_t MysqlSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbtool.MysqlSchema)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .dbtool.MysqlTable tables = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->tables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tables(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string mysql_ip = 1;
    if (has_mysql_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysql_ip());
    }

    // optional string mysql_user = 3;
    if (has_mysql_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysql_user());
    }

    // optional string mysql_passwd = 4;
    if (has_mysql_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysql_passwd());
    }

    // optional string schema_name = 5;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }

    // optional uint32 mysql_port = 2;
    if (has_mysql_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mysql_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlSchema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbtool.MysqlSchema)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlSchema* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MysqlSchema>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbtool.MysqlSchema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbtool.MysqlSchema)
    MergeFrom(*source);
  }
}

void MysqlSchema::MergeFrom(const MysqlSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbtool.MysqlSchema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mysql_ip();
      mysql_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mysql_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mysql_user();
      mysql_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mysql_user_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_mysql_passwd();
      mysql_passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mysql_passwd_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_schema_name();
      schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      mysql_port_ = from.mysql_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MysqlSchema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbtool.MysqlSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlSchema::CopyFrom(const MysqlSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbtool.MysqlSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlSchema::IsInitialized() const {
  return true;
}

void MysqlSchema::Swap(MysqlSchema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlSchema::InternalSwap(MysqlSchema* other) {
  using std::swap;
  tables_.InternalSwap(&other->tables_);
  mysql_ip_.Swap(&other->mysql_ip_);
  mysql_user_.Swap(&other->mysql_user_);
  mysql_passwd_.Swap(&other->mysql_passwd_);
  schema_name_.Swap(&other->schema_name_);
  swap(mysql_port_, other->mysql_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MysqlSchema::GetMetadata() const {
  protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbtool_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MysqlSchemaConf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MysqlSchemaConf::kMysqlSchemasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlSchemaConf::MysqlSchemaConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dbtool_2eproto::InitDefaultsMysqlSchemaConf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbtool.MysqlSchemaConf)
}
MysqlSchemaConf::MysqlSchemaConf(const MysqlSchemaConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mysql_schemas_(from.mysql_schemas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbtool.MysqlSchemaConf)
}

void MysqlSchemaConf::SharedCtor() {
  _cached_size_ = 0;
}

MysqlSchemaConf::~MysqlSchemaConf() {
  // @@protoc_insertion_point(destructor:dbtool.MysqlSchemaConf)
  SharedDtor();
}

void MysqlSchemaConf::SharedDtor() {
}

void MysqlSchemaConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlSchemaConf::descriptor() {
  ::protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbtool_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MysqlSchemaConf& MysqlSchemaConf::default_instance() {
  ::protobuf_dbtool_2eproto::InitDefaultsMysqlSchemaConf();
  return *internal_default_instance();
}

MysqlSchemaConf* MysqlSchemaConf::New(::google::protobuf::Arena* arena) const {
  MysqlSchemaConf* n = new MysqlSchemaConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MysqlSchemaConf::Clear() {
// @@protoc_insertion_point(message_clear_start:dbtool.MysqlSchemaConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mysql_schemas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MysqlSchemaConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbtool.MysqlSchemaConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dbtool.MysqlSchema mysql_schemas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_mysql_schemas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbtool.MysqlSchemaConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbtool.MysqlSchemaConf)
  return false;
#undef DO_
}

void MysqlSchemaConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbtool.MysqlSchemaConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dbtool.MysqlSchema mysql_schemas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mysql_schemas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mysql_schemas(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dbtool.MysqlSchemaConf)
}

::google::protobuf::uint8* MysqlSchemaConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbtool.MysqlSchemaConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dbtool.MysqlSchema mysql_schemas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mysql_schemas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->mysql_schemas(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbtool.MysqlSchemaConf)
  return target;
}

size_t MysqlSchemaConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbtool.MysqlSchemaConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .dbtool.MysqlSchema mysql_schemas = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mysql_schemas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mysql_schemas(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlSchemaConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbtool.MysqlSchemaConf)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlSchemaConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MysqlSchemaConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbtool.MysqlSchemaConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbtool.MysqlSchemaConf)
    MergeFrom(*source);
  }
}

void MysqlSchemaConf::MergeFrom(const MysqlSchemaConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbtool.MysqlSchemaConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mysql_schemas_.MergeFrom(from.mysql_schemas_);
}

void MysqlSchemaConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbtool.MysqlSchemaConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlSchemaConf::CopyFrom(const MysqlSchemaConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbtool.MysqlSchemaConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlSchemaConf::IsInitialized() const {
  return true;
}

void MysqlSchemaConf::Swap(MysqlSchemaConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlSchemaConf::InternalSwap(MysqlSchemaConf* other) {
  using std::swap;
  mysql_schemas_.InternalSwap(&other->mysql_schemas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MysqlSchemaConf::GetMetadata() const {
  protobuf_dbtool_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbtool_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dbtool

// @@protoc_insertion_point(global_scope)
