// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbtool.proto

#ifndef PROTOBUF_dbtool_2eproto__INCLUDED
#define PROTOBUF_dbtool_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_dbtool_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTableFieldImpl();
void InitDefaultsTableField();
void InitDefaultsTableKeyImpl();
void InitDefaultsTableKey();
void InitDefaultsMysqlTableImpl();
void InitDefaultsMysqlTable();
void InitDefaultsMysqlSchemaImpl();
void InitDefaultsMysqlSchema();
void InitDefaultsMysqlSchemaConfImpl();
void InitDefaultsMysqlSchemaConf();
inline void InitDefaults() {
  InitDefaultsTableField();
  InitDefaultsTableKey();
  InitDefaultsMysqlTable();
  InitDefaultsMysqlSchema();
  InitDefaultsMysqlSchemaConf();
}
}  // namespace protobuf_dbtool_2eproto
namespace dbtool {
class MysqlSchema;
class MysqlSchemaDefaultTypeInternal;
extern MysqlSchemaDefaultTypeInternal _MysqlSchema_default_instance_;
class MysqlSchemaConf;
class MysqlSchemaConfDefaultTypeInternal;
extern MysqlSchemaConfDefaultTypeInternal _MysqlSchemaConf_default_instance_;
class MysqlTable;
class MysqlTableDefaultTypeInternal;
extern MysqlTableDefaultTypeInternal _MysqlTable_default_instance_;
class TableField;
class TableFieldDefaultTypeInternal;
extern TableFieldDefaultTypeInternal _TableField_default_instance_;
class TableKey;
class TableKeyDefaultTypeInternal;
extern TableKeyDefaultTypeInternal _TableKey_default_instance_;
}  // namespace dbtool
namespace dbtool {

enum MysqlFieldType {
  E_FieldType_TinyInt = 1,
  E_FieldType_Int = 2,
  E_FieldType_UInt = 3,
  E_FieldType_BigInt = 4,
  E_FieldType_Double = 5,
  E_FieldType_Varchar = 6,
  E_FieldType_Blob = 7,
  E_FieldType_MediumBlob = 8,
  E_FieldType_Text = 9,
  E_FieldType_Date = 10,
  E_FieldType_Time = 11,
  E_FieldType_TimeStamp = 12
};
bool MysqlFieldType_IsValid(int value);
const MysqlFieldType MysqlFieldType_MIN = E_FieldType_TinyInt;
const MysqlFieldType MysqlFieldType_MAX = E_FieldType_TimeStamp;
const int MysqlFieldType_ARRAYSIZE = MysqlFieldType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MysqlFieldType_descriptor();
inline const ::std::string& MysqlFieldType_Name(MysqlFieldType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MysqlFieldType_descriptor(), value);
}
inline bool MysqlFieldType_Parse(
    const ::std::string& name, MysqlFieldType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MysqlFieldType>(
    MysqlFieldType_descriptor(), name, value);
}
enum MysqlKeyType {
  E_KeyType_Primary = 1,
  E_KeyType_Normal = 2,
  E_KeyType_Unique = 3
};
bool MysqlKeyType_IsValid(int value);
const MysqlKeyType MysqlKeyType_MIN = E_KeyType_Primary;
const MysqlKeyType MysqlKeyType_MAX = E_KeyType_Unique;
const int MysqlKeyType_ARRAYSIZE = MysqlKeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MysqlKeyType_descriptor();
inline const ::std::string& MysqlKeyType_Name(MysqlKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MysqlKeyType_descriptor(), value);
}
inline bool MysqlKeyType_Parse(
    const ::std::string& name, MysqlKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MysqlKeyType>(
    MysqlKeyType_descriptor(), name, value);
}
// ===================================================================

class TableField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbtool.TableField) */ {
 public:
  TableField();
  virtual ~TableField();

  TableField(const TableField& from);

  inline TableField& operator=(const TableField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableField(TableField&& from) noexcept
    : TableField() {
    *this = ::std::move(from);
  }

  inline TableField& operator=(TableField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableField* internal_default_instance() {
    return reinterpret_cast<const TableField*>(
               &_TableField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TableField* other);
  friend void swap(TableField& a, TableField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableField* New() const PROTOBUF_FINAL { return New(NULL); }

  TableField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableField& from);
  void MergeFrom(const TableField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string default = 5;
  bool has_default_() const;
  void clear_default_();
  static const int kDefaultFieldNumber = 5;
  const ::std::string& default_() const;
  void set_default_(const ::std::string& value);
  #if LANG_CXX11
  void set_default_(::std::string&& value);
  #endif
  void set_default_(const char* value);
  void set_default_(const char* value, size_t size);
  ::std::string* mutable_default_();
  ::std::string* release_default_();
  void set_allocated_default_(::std::string* default_);

  // optional string add_col_after = 6;
  bool has_add_col_after() const;
  void clear_add_col_after();
  static const int kAddColAfterFieldNumber = 6;
  const ::std::string& add_col_after() const;
  void set_add_col_after(const ::std::string& value);
  #if LANG_CXX11
  void set_add_col_after(::std::string&& value);
  #endif
  void set_add_col_after(const char* value);
  void set_add_col_after(const char* value, size_t size);
  ::std::string* mutable_add_col_after();
  ::std::string* release_add_col_after();
  void set_allocated_add_col_after(::std::string* add_col_after);

  // optional string rename_from = 7;
  bool has_rename_from() const;
  void clear_rename_from();
  static const int kRenameFromFieldNumber = 7;
  const ::std::string& rename_from() const;
  void set_rename_from(const ::std::string& value);
  #if LANG_CXX11
  void set_rename_from(::std::string&& value);
  #endif
  void set_rename_from(const char* value);
  void set_rename_from(const char* value, size_t size);
  ::std::string* mutable_rename_from();
  ::std::string* release_rename_from();
  void set_allocated_rename_from(::std::string* rename_from);

  // optional bool not_null = 3;
  bool has_not_null() const;
  void clear_not_null();
  static const int kNotNullFieldNumber = 3;
  bool not_null() const;
  void set_not_null(bool value);

  // optional bool auto_incr = 4;
  bool has_auto_incr() const;
  void clear_auto_incr();
  static const int kAutoIncrFieldNumber = 4;
  bool auto_incr() const;
  void set_auto_incr(bool value);

  // optional bool is_delete = 10;
  bool has_is_delete() const;
  void clear_is_delete();
  static const int kIsDeleteFieldNumber = 10;
  bool is_delete() const;
  void set_is_delete(bool value);

  // optional uint32 varchar_len = 9 [default = 255];
  bool has_varchar_len() const;
  void clear_varchar_len();
  static const int kVarcharLenFieldNumber = 9;
  ::google::protobuf::uint32 varchar_len() const;
  void set_varchar_len(::google::protobuf::uint32 value);

  // optional .dbtool.MysqlFieldType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::dbtool::MysqlFieldType type() const;
  void set_type(::dbtool::MysqlFieldType value);

  // optional .dbtool.MysqlFieldType modify_type = 8;
  bool has_modify_type() const;
  void clear_modify_type();
  static const int kModifyTypeFieldNumber = 8;
  ::dbtool::MysqlFieldType modify_type() const;
  void set_modify_type(::dbtool::MysqlFieldType value);

  // @@protoc_insertion_point(class_scope:dbtool.TableField)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_not_null();
  void clear_has_not_null();
  void set_has_auto_incr();
  void clear_has_auto_incr();
  void set_has_default_();
  void clear_has_default_();
  void set_has_add_col_after();
  void clear_has_add_col_after();
  void set_has_rename_from();
  void clear_has_rename_from();
  void set_has_modify_type();
  void clear_has_modify_type();
  void set_has_varchar_len();
  void clear_has_varchar_len();
  void set_has_is_delete();
  void clear_has_is_delete();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr default__;
  ::google::protobuf::internal::ArenaStringPtr add_col_after_;
  ::google::protobuf::internal::ArenaStringPtr rename_from_;
  bool not_null_;
  bool auto_incr_;
  bool is_delete_;
  ::google::protobuf::uint32 varchar_len_;
  int type_;
  int modify_type_;
  friend struct ::protobuf_dbtool_2eproto::TableStruct;
  friend void ::protobuf_dbtool_2eproto::InitDefaultsTableFieldImpl();
};
// -------------------------------------------------------------------

class TableKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbtool.TableKey) */ {
 public:
  TableKey();
  virtual ~TableKey();

  TableKey(const TableKey& from);

  inline TableKey& operator=(const TableKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableKey(TableKey&& from) noexcept
    : TableKey() {
    *this = ::std::move(from);
  }

  inline TableKey& operator=(TableKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableKey* internal_default_instance() {
    return reinterpret_cast<const TableKey*>(
               &_TableKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TableKey* other);
  friend void swap(TableKey& a, TableKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableKey* New() const PROTOBUF_FINAL { return New(NULL); }

  TableKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableKey& from);
  void MergeFrom(const TableKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .dbtool.MysqlKeyType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::dbtool::MysqlKeyType type() const;
  void set_type(::dbtool::MysqlKeyType value);

  // @@protoc_insertion_point(class_scope:dbtool.TableKey)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  friend struct ::protobuf_dbtool_2eproto::TableStruct;
  friend void ::protobuf_dbtool_2eproto::InitDefaultsTableKeyImpl();
};
// -------------------------------------------------------------------

class MysqlTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbtool.MysqlTable) */ {
 public:
  MysqlTable();
  virtual ~MysqlTable();

  MysqlTable(const MysqlTable& from);

  inline MysqlTable& operator=(const MysqlTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlTable(MysqlTable&& from) noexcept
    : MysqlTable() {
    *this = ::std::move(from);
  }

  inline MysqlTable& operator=(MysqlTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlTable* internal_default_instance() {
    return reinterpret_cast<const MysqlTable*>(
               &_MysqlTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MysqlTable* other);
  friend void swap(MysqlTable& a, MysqlTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlTable* New() const PROTOBUF_FINAL { return New(NULL); }

  MysqlTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MysqlTable& from);
  void MergeFrom(const MysqlTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MysqlTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dbtool.TableField fields = 2;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 2;
  const ::dbtool::TableField& fields(int index) const;
  ::dbtool::TableField* mutable_fields(int index);
  ::dbtool::TableField* add_fields();
  ::google::protobuf::RepeatedPtrField< ::dbtool::TableField >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::dbtool::TableField >&
      fields() const;

  // repeated .dbtool.TableKey keys = 3;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 3;
  const ::dbtool::TableKey& keys(int index) const;
  ::dbtool::TableKey* mutable_keys(int index);
  ::dbtool::TableKey* add_keys();
  ::google::protobuf::RepeatedPtrField< ::dbtool::TableKey >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::dbtool::TableKey >&
      keys() const;

  // optional string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:dbtool.MysqlTable)
 private:
  void set_has_table_name();
  void clear_has_table_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dbtool::TableField > fields_;
  ::google::protobuf::RepeatedPtrField< ::dbtool::TableKey > keys_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  friend struct ::protobuf_dbtool_2eproto::TableStruct;
  friend void ::protobuf_dbtool_2eproto::InitDefaultsMysqlTableImpl();
};
// -------------------------------------------------------------------

class MysqlSchema : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbtool.MysqlSchema) */ {
 public:
  MysqlSchema();
  virtual ~MysqlSchema();

  MysqlSchema(const MysqlSchema& from);

  inline MysqlSchema& operator=(const MysqlSchema& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlSchema(MysqlSchema&& from) noexcept
    : MysqlSchema() {
    *this = ::std::move(from);
  }

  inline MysqlSchema& operator=(MysqlSchema&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlSchema& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlSchema* internal_default_instance() {
    return reinterpret_cast<const MysqlSchema*>(
               &_MysqlSchema_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MysqlSchema* other);
  friend void swap(MysqlSchema& a, MysqlSchema& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlSchema* New() const PROTOBUF_FINAL { return New(NULL); }

  MysqlSchema* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MysqlSchema& from);
  void MergeFrom(const MysqlSchema& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MysqlSchema* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dbtool.MysqlTable tables = 6;
  int tables_size() const;
  void clear_tables();
  static const int kTablesFieldNumber = 6;
  const ::dbtool::MysqlTable& tables(int index) const;
  ::dbtool::MysqlTable* mutable_tables(int index);
  ::dbtool::MysqlTable* add_tables();
  ::google::protobuf::RepeatedPtrField< ::dbtool::MysqlTable >*
      mutable_tables();
  const ::google::protobuf::RepeatedPtrField< ::dbtool::MysqlTable >&
      tables() const;

  // optional string mysql_ip = 1;
  bool has_mysql_ip() const;
  void clear_mysql_ip();
  static const int kMysqlIpFieldNumber = 1;
  const ::std::string& mysql_ip() const;
  void set_mysql_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_mysql_ip(::std::string&& value);
  #endif
  void set_mysql_ip(const char* value);
  void set_mysql_ip(const char* value, size_t size);
  ::std::string* mutable_mysql_ip();
  ::std::string* release_mysql_ip();
  void set_allocated_mysql_ip(::std::string* mysql_ip);

  // optional string mysql_user = 3;
  bool has_mysql_user() const;
  void clear_mysql_user();
  static const int kMysqlUserFieldNumber = 3;
  const ::std::string& mysql_user() const;
  void set_mysql_user(const ::std::string& value);
  #if LANG_CXX11
  void set_mysql_user(::std::string&& value);
  #endif
  void set_mysql_user(const char* value);
  void set_mysql_user(const char* value, size_t size);
  ::std::string* mutable_mysql_user();
  ::std::string* release_mysql_user();
  void set_allocated_mysql_user(::std::string* mysql_user);

  // optional string mysql_passwd = 4;
  bool has_mysql_passwd() const;
  void clear_mysql_passwd();
  static const int kMysqlPasswdFieldNumber = 4;
  const ::std::string& mysql_passwd() const;
  void set_mysql_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_mysql_passwd(::std::string&& value);
  #endif
  void set_mysql_passwd(const char* value);
  void set_mysql_passwd(const char* value, size_t size);
  ::std::string* mutable_mysql_passwd();
  ::std::string* release_mysql_passwd();
  void set_allocated_mysql_passwd(::std::string* mysql_passwd);

  // optional string schema_name = 5;
  bool has_schema_name() const;
  void clear_schema_name();
  static const int kSchemaNameFieldNumber = 5;
  const ::std::string& schema_name() const;
  void set_schema_name(const ::std::string& value);
  #if LANG_CXX11
  void set_schema_name(::std::string&& value);
  #endif
  void set_schema_name(const char* value);
  void set_schema_name(const char* value, size_t size);
  ::std::string* mutable_schema_name();
  ::std::string* release_schema_name();
  void set_allocated_schema_name(::std::string* schema_name);

  // optional uint32 mysql_port = 2;
  bool has_mysql_port() const;
  void clear_mysql_port();
  static const int kMysqlPortFieldNumber = 2;
  ::google::protobuf::uint32 mysql_port() const;
  void set_mysql_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dbtool.MysqlSchema)
 private:
  void set_has_mysql_ip();
  void clear_has_mysql_ip();
  void set_has_mysql_port();
  void clear_has_mysql_port();
  void set_has_mysql_user();
  void clear_has_mysql_user();
  void set_has_mysql_passwd();
  void clear_has_mysql_passwd();
  void set_has_schema_name();
  void clear_has_schema_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dbtool::MysqlTable > tables_;
  ::google::protobuf::internal::ArenaStringPtr mysql_ip_;
  ::google::protobuf::internal::ArenaStringPtr mysql_user_;
  ::google::protobuf::internal::ArenaStringPtr mysql_passwd_;
  ::google::protobuf::internal::ArenaStringPtr schema_name_;
  ::google::protobuf::uint32 mysql_port_;
  friend struct ::protobuf_dbtool_2eproto::TableStruct;
  friend void ::protobuf_dbtool_2eproto::InitDefaultsMysqlSchemaImpl();
};
// -------------------------------------------------------------------

class MysqlSchemaConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbtool.MysqlSchemaConf) */ {
 public:
  MysqlSchemaConf();
  virtual ~MysqlSchemaConf();

  MysqlSchemaConf(const MysqlSchemaConf& from);

  inline MysqlSchemaConf& operator=(const MysqlSchemaConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlSchemaConf(MysqlSchemaConf&& from) noexcept
    : MysqlSchemaConf() {
    *this = ::std::move(from);
  }

  inline MysqlSchemaConf& operator=(MysqlSchemaConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlSchemaConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlSchemaConf* internal_default_instance() {
    return reinterpret_cast<const MysqlSchemaConf*>(
               &_MysqlSchemaConf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(MysqlSchemaConf* other);
  friend void swap(MysqlSchemaConf& a, MysqlSchemaConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlSchemaConf* New() const PROTOBUF_FINAL { return New(NULL); }

  MysqlSchemaConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MysqlSchemaConf& from);
  void MergeFrom(const MysqlSchemaConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MysqlSchemaConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dbtool.MysqlSchema mysql_schemas = 1;
  int mysql_schemas_size() const;
  void clear_mysql_schemas();
  static const int kMysqlSchemasFieldNumber = 1;
  const ::dbtool::MysqlSchema& mysql_schemas(int index) const;
  ::dbtool::MysqlSchema* mutable_mysql_schemas(int index);
  ::dbtool::MysqlSchema* add_mysql_schemas();
  ::google::protobuf::RepeatedPtrField< ::dbtool::MysqlSchema >*
      mutable_mysql_schemas();
  const ::google::protobuf::RepeatedPtrField< ::dbtool::MysqlSchema >&
      mysql_schemas() const;

  // @@protoc_insertion_point(class_scope:dbtool.MysqlSchemaConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dbtool::MysqlSchema > mysql_schemas_;
  friend struct ::protobuf_dbtool_2eproto::TableStruct;
  friend void ::protobuf_dbtool_2eproto::InitDefaultsMysqlSchemaConfImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TableField

// optional string name = 1;
inline bool TableField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TableField::name() const {
  // @@protoc_insertion_point(field_get:dbtool.TableField.name)
  return name_.GetNoArena();
}
inline void TableField::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbtool.TableField.name)
}
#if LANG_CXX11
inline void TableField::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbtool.TableField.name)
}
#endif
inline void TableField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbtool.TableField.name)
}
inline void TableField::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbtool.TableField.name)
}
inline ::std::string* TableField::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dbtool.TableField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableField::release_name() {
  // @@protoc_insertion_point(field_release:dbtool.TableField.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dbtool.TableField.name)
}

// optional .dbtool.MysqlFieldType type = 2;
inline bool TableField::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TableField::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TableField::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TableField::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::dbtool::MysqlFieldType TableField::type() const {
  // @@protoc_insertion_point(field_get:dbtool.TableField.type)
  return static_cast< ::dbtool::MysqlFieldType >(type_);
}
inline void TableField::set_type(::dbtool::MysqlFieldType value) {
  assert(::dbtool::MysqlFieldType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:dbtool.TableField.type)
}

// optional bool not_null = 3;
inline bool TableField::has_not_null() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TableField::set_has_not_null() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TableField::clear_has_not_null() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TableField::clear_not_null() {
  not_null_ = false;
  clear_has_not_null();
}
inline bool TableField::not_null() const {
  // @@protoc_insertion_point(field_get:dbtool.TableField.not_null)
  return not_null_;
}
inline void TableField::set_not_null(bool value) {
  set_has_not_null();
  not_null_ = value;
  // @@protoc_insertion_point(field_set:dbtool.TableField.not_null)
}

// optional bool auto_incr = 4;
inline bool TableField::has_auto_incr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TableField::set_has_auto_incr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TableField::clear_has_auto_incr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TableField::clear_auto_incr() {
  auto_incr_ = false;
  clear_has_auto_incr();
}
inline bool TableField::auto_incr() const {
  // @@protoc_insertion_point(field_get:dbtool.TableField.auto_incr)
  return auto_incr_;
}
inline void TableField::set_auto_incr(bool value) {
  set_has_auto_incr();
  auto_incr_ = value;
  // @@protoc_insertion_point(field_set:dbtool.TableField.auto_incr)
}

// optional string default = 5;
inline bool TableField::has_default_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableField::set_has_default_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableField::clear_has_default_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableField::clear_default_() {
  default__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_();
}
inline const ::std::string& TableField::default_() const {
  // @@protoc_insertion_point(field_get:dbtool.TableField.default)
  return default__.GetNoArena();
}
inline void TableField::set_default_(const ::std::string& value) {
  set_has_default_();
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbtool.TableField.default)
}
#if LANG_CXX11
inline void TableField::set_default_(::std::string&& value) {
  set_has_default_();
  default__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbtool.TableField.default)
}
#endif
inline void TableField::set_default_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_();
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbtool.TableField.default)
}
inline void TableField::set_default_(const char* value, size_t size) {
  set_has_default_();
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbtool.TableField.default)
}
inline ::std::string* TableField::mutable_default_() {
  set_has_default_();
  // @@protoc_insertion_point(field_mutable:dbtool.TableField.default)
  return default__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableField::release_default_() {
  // @@protoc_insertion_point(field_release:dbtool.TableField.default)
  clear_has_default_();
  return default__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableField::set_allocated_default_(::std::string* default_) {
  if (default_ != NULL) {
    set_has_default_();
  } else {
    clear_has_default_();
  }
  default__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_);
  // @@protoc_insertion_point(field_set_allocated:dbtool.TableField.default)
}

// optional string add_col_after = 6;
inline bool TableField::has_add_col_after() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableField::set_has_add_col_after() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableField::clear_has_add_col_after() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableField::clear_add_col_after() {
  add_col_after_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_add_col_after();
}
inline const ::std::string& TableField::add_col_after() const {
  // @@protoc_insertion_point(field_get:dbtool.TableField.add_col_after)
  return add_col_after_.GetNoArena();
}
inline void TableField::set_add_col_after(const ::std::string& value) {
  set_has_add_col_after();
  add_col_after_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbtool.TableField.add_col_after)
}
#if LANG_CXX11
inline void TableField::set_add_col_after(::std::string&& value) {
  set_has_add_col_after();
  add_col_after_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbtool.TableField.add_col_after)
}
#endif
inline void TableField::set_add_col_after(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_add_col_after();
  add_col_after_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbtool.TableField.add_col_after)
}
inline void TableField::set_add_col_after(const char* value, size_t size) {
  set_has_add_col_after();
  add_col_after_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbtool.TableField.add_col_after)
}
inline ::std::string* TableField::mutable_add_col_after() {
  set_has_add_col_after();
  // @@protoc_insertion_point(field_mutable:dbtool.TableField.add_col_after)
  return add_col_after_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableField::release_add_col_after() {
  // @@protoc_insertion_point(field_release:dbtool.TableField.add_col_after)
  clear_has_add_col_after();
  return add_col_after_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableField::set_allocated_add_col_after(::std::string* add_col_after) {
  if (add_col_after != NULL) {
    set_has_add_col_after();
  } else {
    clear_has_add_col_after();
  }
  add_col_after_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_col_after);
  // @@protoc_insertion_point(field_set_allocated:dbtool.TableField.add_col_after)
}

// optional string rename_from = 7;
inline bool TableField::has_rename_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TableField::set_has_rename_from() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TableField::clear_has_rename_from() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TableField::clear_rename_from() {
  rename_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rename_from();
}
inline const ::std::string& TableField::rename_from() const {
  // @@protoc_insertion_point(field_get:dbtool.TableField.rename_from)
  return rename_from_.GetNoArena();
}
inline void TableField::set_rename_from(const ::std::string& value) {
  set_has_rename_from();
  rename_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbtool.TableField.rename_from)
}
#if LANG_CXX11
inline void TableField::set_rename_from(::std::string&& value) {
  set_has_rename_from();
  rename_from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbtool.TableField.rename_from)
}
#endif
inline void TableField::set_rename_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rename_from();
  rename_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbtool.TableField.rename_from)
}
inline void TableField::set_rename_from(const char* value, size_t size) {
  set_has_rename_from();
  rename_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbtool.TableField.rename_from)
}
inline ::std::string* TableField::mutable_rename_from() {
  set_has_rename_from();
  // @@protoc_insertion_point(field_mutable:dbtool.TableField.rename_from)
  return rename_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableField::release_rename_from() {
  // @@protoc_insertion_point(field_release:dbtool.TableField.rename_from)
  clear_has_rename_from();
  return rename_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableField::set_allocated_rename_from(::std::string* rename_from) {
  if (rename_from != NULL) {
    set_has_rename_from();
  } else {
    clear_has_rename_from();
  }
  rename_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rename_from);
  // @@protoc_insertion_point(field_set_allocated:dbtool.TableField.rename_from)
}

// optional .dbtool.MysqlFieldType modify_type = 8;
inline bool TableField::has_modify_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TableField::set_has_modify_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TableField::clear_has_modify_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TableField::clear_modify_type() {
  modify_type_ = 1;
  clear_has_modify_type();
}
inline ::dbtool::MysqlFieldType TableField::modify_type() const {
  // @@protoc_insertion_point(field_get:dbtool.TableField.modify_type)
  return static_cast< ::dbtool::MysqlFieldType >(modify_type_);
}
inline void TableField::set_modify_type(::dbtool::MysqlFieldType value) {
  assert(::dbtool::MysqlFieldType_IsValid(value));
  set_has_modify_type();
  modify_type_ = value;
  // @@protoc_insertion_point(field_set:dbtool.TableField.modify_type)
}

// optional uint32 varchar_len = 9 [default = 255];
inline bool TableField::has_varchar_len() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TableField::set_has_varchar_len() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TableField::clear_has_varchar_len() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TableField::clear_varchar_len() {
  varchar_len_ = 255u;
  clear_has_varchar_len();
}
inline ::google::protobuf::uint32 TableField::varchar_len() const {
  // @@protoc_insertion_point(field_get:dbtool.TableField.varchar_len)
  return varchar_len_;
}
inline void TableField::set_varchar_len(::google::protobuf::uint32 value) {
  set_has_varchar_len();
  varchar_len_ = value;
  // @@protoc_insertion_point(field_set:dbtool.TableField.varchar_len)
}

// optional bool is_delete = 10;
inline bool TableField::has_is_delete() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TableField::set_has_is_delete() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TableField::clear_has_is_delete() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TableField::clear_is_delete() {
  is_delete_ = false;
  clear_has_is_delete();
}
inline bool TableField::is_delete() const {
  // @@protoc_insertion_point(field_get:dbtool.TableField.is_delete)
  return is_delete_;
}
inline void TableField::set_is_delete(bool value) {
  set_has_is_delete();
  is_delete_ = value;
  // @@protoc_insertion_point(field_set:dbtool.TableField.is_delete)
}

// -------------------------------------------------------------------

// TableKey

// optional string name = 1;
inline bool TableKey::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableKey::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableKey::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TableKey::name() const {
  // @@protoc_insertion_point(field_get:dbtool.TableKey.name)
  return name_.GetNoArena();
}
inline void TableKey::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbtool.TableKey.name)
}
#if LANG_CXX11
inline void TableKey::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbtool.TableKey.name)
}
#endif
inline void TableKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbtool.TableKey.name)
}
inline void TableKey::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbtool.TableKey.name)
}
inline ::std::string* TableKey::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dbtool.TableKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableKey::release_name() {
  // @@protoc_insertion_point(field_release:dbtool.TableKey.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dbtool.TableKey.name)
}

// optional .dbtool.MysqlKeyType type = 2;
inline bool TableKey::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableKey::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableKey::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableKey::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::dbtool::MysqlKeyType TableKey::type() const {
  // @@protoc_insertion_point(field_get:dbtool.TableKey.type)
  return static_cast< ::dbtool::MysqlKeyType >(type_);
}
inline void TableKey::set_type(::dbtool::MysqlKeyType value) {
  assert(::dbtool::MysqlKeyType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:dbtool.TableKey.type)
}

// repeated string fields = 3;
inline int TableKey::fields_size() const {
  return fields_.size();
}
inline void TableKey::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& TableKey::fields(int index) const {
  // @@protoc_insertion_point(field_get:dbtool.TableKey.fields)
  return fields_.Get(index);
}
inline ::std::string* TableKey::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:dbtool.TableKey.fields)
  return fields_.Mutable(index);
}
inline void TableKey::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dbtool.TableKey.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TableKey::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dbtool.TableKey.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TableKey::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dbtool.TableKey.fields)
}
inline void TableKey::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dbtool.TableKey.fields)
}
inline ::std::string* TableKey::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:dbtool.TableKey.fields)
  return fields_.Add();
}
inline void TableKey::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dbtool.TableKey.fields)
}
#if LANG_CXX11
inline void TableKey::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dbtool.TableKey.fields)
}
#endif
inline void TableKey::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dbtool.TableKey.fields)
}
inline void TableKey::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dbtool.TableKey.fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableKey::fields() const {
  // @@protoc_insertion_point(field_list:dbtool.TableKey.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TableKey::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:dbtool.TableKey.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// MysqlTable

// optional string table_name = 1;
inline bool MysqlTable::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlTable::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlTable::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlTable::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& MysqlTable::table_name() const {
  // @@protoc_insertion_point(field_get:dbtool.MysqlTable.table_name)
  return table_name_.GetNoArena();
}
inline void MysqlTable::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbtool.MysqlTable.table_name)
}
#if LANG_CXX11
inline void MysqlTable::set_table_name(::std::string&& value) {
  set_has_table_name();
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbtool.MysqlTable.table_name)
}
#endif
inline void MysqlTable::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbtool.MysqlTable.table_name)
}
inline void MysqlTable::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbtool.MysqlTable.table_name)
}
inline ::std::string* MysqlTable::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:dbtool.MysqlTable.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlTable::release_table_name() {
  // @@protoc_insertion_point(field_release:dbtool.MysqlTable.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlTable::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:dbtool.MysqlTable.table_name)
}

// repeated .dbtool.TableField fields = 2;
inline int MysqlTable::fields_size() const {
  return fields_.size();
}
inline void MysqlTable::clear_fields() {
  fields_.Clear();
}
inline const ::dbtool::TableField& MysqlTable::fields(int index) const {
  // @@protoc_insertion_point(field_get:dbtool.MysqlTable.fields)
  return fields_.Get(index);
}
inline ::dbtool::TableField* MysqlTable::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:dbtool.MysqlTable.fields)
  return fields_.Mutable(index);
}
inline ::dbtool::TableField* MysqlTable::add_fields() {
  // @@protoc_insertion_point(field_add:dbtool.MysqlTable.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dbtool::TableField >*
MysqlTable::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:dbtool.MysqlTable.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dbtool::TableField >&
MysqlTable::fields() const {
  // @@protoc_insertion_point(field_list:dbtool.MysqlTable.fields)
  return fields_;
}

// repeated .dbtool.TableKey keys = 3;
inline int MysqlTable::keys_size() const {
  return keys_.size();
}
inline void MysqlTable::clear_keys() {
  keys_.Clear();
}
inline const ::dbtool::TableKey& MysqlTable::keys(int index) const {
  // @@protoc_insertion_point(field_get:dbtool.MysqlTable.keys)
  return keys_.Get(index);
}
inline ::dbtool::TableKey* MysqlTable::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dbtool.MysqlTable.keys)
  return keys_.Mutable(index);
}
inline ::dbtool::TableKey* MysqlTable::add_keys() {
  // @@protoc_insertion_point(field_add:dbtool.MysqlTable.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dbtool::TableKey >*
MysqlTable::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:dbtool.MysqlTable.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dbtool::TableKey >&
MysqlTable::keys() const {
  // @@protoc_insertion_point(field_list:dbtool.MysqlTable.keys)
  return keys_;
}

// -------------------------------------------------------------------

// MysqlSchema

// optional string mysql_ip = 1;
inline bool MysqlSchema::has_mysql_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlSchema::set_has_mysql_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlSchema::clear_has_mysql_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlSchema::clear_mysql_ip() {
  mysql_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mysql_ip();
}
inline const ::std::string& MysqlSchema::mysql_ip() const {
  // @@protoc_insertion_point(field_get:dbtool.MysqlSchema.mysql_ip)
  return mysql_ip_.GetNoArena();
}
inline void MysqlSchema::set_mysql_ip(const ::std::string& value) {
  set_has_mysql_ip();
  mysql_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbtool.MysqlSchema.mysql_ip)
}
#if LANG_CXX11
inline void MysqlSchema::set_mysql_ip(::std::string&& value) {
  set_has_mysql_ip();
  mysql_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbtool.MysqlSchema.mysql_ip)
}
#endif
inline void MysqlSchema::set_mysql_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mysql_ip();
  mysql_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbtool.MysqlSchema.mysql_ip)
}
inline void MysqlSchema::set_mysql_ip(const char* value, size_t size) {
  set_has_mysql_ip();
  mysql_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbtool.MysqlSchema.mysql_ip)
}
inline ::std::string* MysqlSchema::mutable_mysql_ip() {
  set_has_mysql_ip();
  // @@protoc_insertion_point(field_mutable:dbtool.MysqlSchema.mysql_ip)
  return mysql_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlSchema::release_mysql_ip() {
  // @@protoc_insertion_point(field_release:dbtool.MysqlSchema.mysql_ip)
  clear_has_mysql_ip();
  return mysql_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlSchema::set_allocated_mysql_ip(::std::string* mysql_ip) {
  if (mysql_ip != NULL) {
    set_has_mysql_ip();
  } else {
    clear_has_mysql_ip();
  }
  mysql_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mysql_ip);
  // @@protoc_insertion_point(field_set_allocated:dbtool.MysqlSchema.mysql_ip)
}

// optional uint32 mysql_port = 2;
inline bool MysqlSchema::has_mysql_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MysqlSchema::set_has_mysql_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MysqlSchema::clear_has_mysql_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MysqlSchema::clear_mysql_port() {
  mysql_port_ = 0u;
  clear_has_mysql_port();
}
inline ::google::protobuf::uint32 MysqlSchema::mysql_port() const {
  // @@protoc_insertion_point(field_get:dbtool.MysqlSchema.mysql_port)
  return mysql_port_;
}
inline void MysqlSchema::set_mysql_port(::google::protobuf::uint32 value) {
  set_has_mysql_port();
  mysql_port_ = value;
  // @@protoc_insertion_point(field_set:dbtool.MysqlSchema.mysql_port)
}

// optional string mysql_user = 3;
inline bool MysqlSchema::has_mysql_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MysqlSchema::set_has_mysql_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MysqlSchema::clear_has_mysql_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MysqlSchema::clear_mysql_user() {
  mysql_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mysql_user();
}
inline const ::std::string& MysqlSchema::mysql_user() const {
  // @@protoc_insertion_point(field_get:dbtool.MysqlSchema.mysql_user)
  return mysql_user_.GetNoArena();
}
inline void MysqlSchema::set_mysql_user(const ::std::string& value) {
  set_has_mysql_user();
  mysql_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbtool.MysqlSchema.mysql_user)
}
#if LANG_CXX11
inline void MysqlSchema::set_mysql_user(::std::string&& value) {
  set_has_mysql_user();
  mysql_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbtool.MysqlSchema.mysql_user)
}
#endif
inline void MysqlSchema::set_mysql_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mysql_user();
  mysql_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbtool.MysqlSchema.mysql_user)
}
inline void MysqlSchema::set_mysql_user(const char* value, size_t size) {
  set_has_mysql_user();
  mysql_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbtool.MysqlSchema.mysql_user)
}
inline ::std::string* MysqlSchema::mutable_mysql_user() {
  set_has_mysql_user();
  // @@protoc_insertion_point(field_mutable:dbtool.MysqlSchema.mysql_user)
  return mysql_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlSchema::release_mysql_user() {
  // @@protoc_insertion_point(field_release:dbtool.MysqlSchema.mysql_user)
  clear_has_mysql_user();
  return mysql_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlSchema::set_allocated_mysql_user(::std::string* mysql_user) {
  if (mysql_user != NULL) {
    set_has_mysql_user();
  } else {
    clear_has_mysql_user();
  }
  mysql_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mysql_user);
  // @@protoc_insertion_point(field_set_allocated:dbtool.MysqlSchema.mysql_user)
}

// optional string mysql_passwd = 4;
inline bool MysqlSchema::has_mysql_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MysqlSchema::set_has_mysql_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MysqlSchema::clear_has_mysql_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MysqlSchema::clear_mysql_passwd() {
  mysql_passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mysql_passwd();
}
inline const ::std::string& MysqlSchema::mysql_passwd() const {
  // @@protoc_insertion_point(field_get:dbtool.MysqlSchema.mysql_passwd)
  return mysql_passwd_.GetNoArena();
}
inline void MysqlSchema::set_mysql_passwd(const ::std::string& value) {
  set_has_mysql_passwd();
  mysql_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbtool.MysqlSchema.mysql_passwd)
}
#if LANG_CXX11
inline void MysqlSchema::set_mysql_passwd(::std::string&& value) {
  set_has_mysql_passwd();
  mysql_passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbtool.MysqlSchema.mysql_passwd)
}
#endif
inline void MysqlSchema::set_mysql_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mysql_passwd();
  mysql_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbtool.MysqlSchema.mysql_passwd)
}
inline void MysqlSchema::set_mysql_passwd(const char* value, size_t size) {
  set_has_mysql_passwd();
  mysql_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbtool.MysqlSchema.mysql_passwd)
}
inline ::std::string* MysqlSchema::mutable_mysql_passwd() {
  set_has_mysql_passwd();
  // @@protoc_insertion_point(field_mutable:dbtool.MysqlSchema.mysql_passwd)
  return mysql_passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlSchema::release_mysql_passwd() {
  // @@protoc_insertion_point(field_release:dbtool.MysqlSchema.mysql_passwd)
  clear_has_mysql_passwd();
  return mysql_passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlSchema::set_allocated_mysql_passwd(::std::string* mysql_passwd) {
  if (mysql_passwd != NULL) {
    set_has_mysql_passwd();
  } else {
    clear_has_mysql_passwd();
  }
  mysql_passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mysql_passwd);
  // @@protoc_insertion_point(field_set_allocated:dbtool.MysqlSchema.mysql_passwd)
}

// optional string schema_name = 5;
inline bool MysqlSchema::has_schema_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MysqlSchema::set_has_schema_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MysqlSchema::clear_has_schema_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MysqlSchema::clear_schema_name() {
  schema_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schema_name();
}
inline const ::std::string& MysqlSchema::schema_name() const {
  // @@protoc_insertion_point(field_get:dbtool.MysqlSchema.schema_name)
  return schema_name_.GetNoArena();
}
inline void MysqlSchema::set_schema_name(const ::std::string& value) {
  set_has_schema_name();
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbtool.MysqlSchema.schema_name)
}
#if LANG_CXX11
inline void MysqlSchema::set_schema_name(::std::string&& value) {
  set_has_schema_name();
  schema_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbtool.MysqlSchema.schema_name)
}
#endif
inline void MysqlSchema::set_schema_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_schema_name();
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbtool.MysqlSchema.schema_name)
}
inline void MysqlSchema::set_schema_name(const char* value, size_t size) {
  set_has_schema_name();
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbtool.MysqlSchema.schema_name)
}
inline ::std::string* MysqlSchema::mutable_schema_name() {
  set_has_schema_name();
  // @@protoc_insertion_point(field_mutable:dbtool.MysqlSchema.schema_name)
  return schema_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlSchema::release_schema_name() {
  // @@protoc_insertion_point(field_release:dbtool.MysqlSchema.schema_name)
  clear_has_schema_name();
  return schema_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlSchema::set_allocated_schema_name(::std::string* schema_name) {
  if (schema_name != NULL) {
    set_has_schema_name();
  } else {
    clear_has_schema_name();
  }
  schema_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema_name);
  // @@protoc_insertion_point(field_set_allocated:dbtool.MysqlSchema.schema_name)
}

// repeated .dbtool.MysqlTable tables = 6;
inline int MysqlSchema::tables_size() const {
  return tables_.size();
}
inline void MysqlSchema::clear_tables() {
  tables_.Clear();
}
inline const ::dbtool::MysqlTable& MysqlSchema::tables(int index) const {
  // @@protoc_insertion_point(field_get:dbtool.MysqlSchema.tables)
  return tables_.Get(index);
}
inline ::dbtool::MysqlTable* MysqlSchema::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:dbtool.MysqlSchema.tables)
  return tables_.Mutable(index);
}
inline ::dbtool::MysqlTable* MysqlSchema::add_tables() {
  // @@protoc_insertion_point(field_add:dbtool.MysqlSchema.tables)
  return tables_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dbtool::MysqlTable >*
MysqlSchema::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:dbtool.MysqlSchema.tables)
  return &tables_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dbtool::MysqlTable >&
MysqlSchema::tables() const {
  // @@protoc_insertion_point(field_list:dbtool.MysqlSchema.tables)
  return tables_;
}

// -------------------------------------------------------------------

// MysqlSchemaConf

// repeated .dbtool.MysqlSchema mysql_schemas = 1;
inline int MysqlSchemaConf::mysql_schemas_size() const {
  return mysql_schemas_.size();
}
inline void MysqlSchemaConf::clear_mysql_schemas() {
  mysql_schemas_.Clear();
}
inline const ::dbtool::MysqlSchema& MysqlSchemaConf::mysql_schemas(int index) const {
  // @@protoc_insertion_point(field_get:dbtool.MysqlSchemaConf.mysql_schemas)
  return mysql_schemas_.Get(index);
}
inline ::dbtool::MysqlSchema* MysqlSchemaConf::mutable_mysql_schemas(int index) {
  // @@protoc_insertion_point(field_mutable:dbtool.MysqlSchemaConf.mysql_schemas)
  return mysql_schemas_.Mutable(index);
}
inline ::dbtool::MysqlSchema* MysqlSchemaConf::add_mysql_schemas() {
  // @@protoc_insertion_point(field_add:dbtool.MysqlSchemaConf.mysql_schemas)
  return mysql_schemas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dbtool::MysqlSchema >*
MysqlSchemaConf::mutable_mysql_schemas() {
  // @@protoc_insertion_point(field_mutable_list:dbtool.MysqlSchemaConf.mysql_schemas)
  return &mysql_schemas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dbtool::MysqlSchema >&
MysqlSchemaConf::mysql_schemas() const {
  // @@protoc_insertion_point(field_list:dbtool.MysqlSchemaConf.mysql_schemas)
  return mysql_schemas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbtool

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dbtool::MysqlFieldType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbtool::MysqlFieldType>() {
  return ::dbtool::MysqlFieldType_descriptor();
}
template <> struct is_proto_enum< ::dbtool::MysqlKeyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbtool::MysqlKeyType>() {
  return ::dbtool::MysqlKeyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dbtool_2eproto__INCLUDED
